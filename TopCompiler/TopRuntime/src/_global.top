type

type Array[T] =
    length: uint
    capacity: uint
    allocator: Maybe[&Allocator]
    data: Maybe[&T]

def Array[T].op_get(&self, index) T =
    assert index < self.length

    *(offset self.data.unwrap!, index)

def Array[T].op_set(&self, index, value: T) =
    assert index < self.length

    *(offset self.data.unwrap!, index) = value

def Array[T].reserve(&self, newSize: uint) =
    if self.allocator is None:
        self.allocator = context.allocator

    using self.allocator

    match self.data with
        Some data ->
            assert newSize >= self.length
            self.capacity = newSize
            oldData := data
            defer free oldData
            data = alloc self.capacity * sizeof T

            self.data = Some data
            memcpy data, oldData, (self.length - 1) sizeof T

            *(offset data, index) = value

        None ->
            newMemory := alloc sizeof T
            self.data = Some newMemory
            self.capacity = newSize

def Array[T].append &self, value: T =
    newLength = self.length + 1
    if newLength >= self.capacity then
        self.reserve self.capacity * 2

    *(offset self.data.unwrap!, index) = value
    self.length = newLength

def Array[T].join(&self, delimiter: string) =
    builder := new-string-builder
    defer self.allocator.free builder

    match self.length with
        0 ->
        1 -> builder.append toString self[0]

        _ ->
            for i in 0 .. self.length - 1 do
                builder.append toString[self[i]]
                builder.append delimiter

            builder.append toString[self[-1]]

    toString builder

def Array[T: Stringer].toString(&self) =
    "[ {self.join ", "} ]"
type Maybe[T] either
    Some T
    None

def Maybe[T: Stringer].toString(self) =
    match self with
        Some x ->
            "Some({x})"

        None ->
            "None"

def Maybe[T].unwrap(self) =
    if self is None:
        panic "Trying to unwrap maybe, which was None"


ext _ = '#include <string.h>'
ext memcpy: |&none, &none, size-t| -> &none = 'memcpy'
ext c-alloc: |size-t| -> &none = 'malloc'
ext c-free: |&none-t| -> none = 'free'