type StaticArray[T, S] =
    data: &T
    length: uint

def StaticArray[T, S].op_get(&self, index: uint) &T =
    assert index < self.length, "Out of bounds"
    indexPtr self.data, index

def StaticArray[T: Stringer, S].join(&self, delimiter: string) string =
    match self.length with
        0 -> ""
        1 -> toString self[0]
        _ ->
            s := ""
            i := 0
            while i < self.length - 1 do
                s += "{self[i]}{delimiter}"
                i += 1

            s + toString self[self.length - 1]

def StaticArray[T: Equaliser[T], S].contains(&self, elem: T) bool =
    i := 0
    while i < self.length do
        if &self[i] == &elem then return true
        i += 1
    false

def StaticArray[T: Stringer, S].toString(&self) string =
    "[ {self.join ", "} ]"

def StaticArray[T, S].iterator(&self) =
    StaticArrayIterator{ self, 0, self.length }

//Iterator for arrays
type StaticArrayIterator[T, S] =
    array: &StaticArray[T, S]
    it: uint
    length: uint

//#inline
def StaticArrayIterator[T, S].next(&self) Maybe[T] =
    if self.it >= self.array.length then None
    else
        self.it += 1
        Some self.array[self.it - 1]