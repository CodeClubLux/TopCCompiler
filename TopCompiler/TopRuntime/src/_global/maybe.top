type Maybe[T] either
    Some(T)
    None

def Maybe[T: Stringer].toString(self) string =
    match self with
        Some x ->
            "Some({x})"

        None ->
            "None"

def Maybe[T].unwrap(self) T =
    guard Some x := self
    else panic "Trying to unwrap maybe, which was None"

    x

def Maybe[T].expect(self, mesg: string) T =
    guard Some x := self
    else panic mesg

    x

def Maybe[T].default(self, value: T) T =
    match self with
        Some x -> x
        None -> value

def Maybe[T].map[R](self, f: |T| -> R) Maybe[R] =
    match self with
        Some x -> Some (f x)
        None -> None

def Maybe[T].is_none(self) bool =
    match self with
        Some _ -> false
        None -> true

type Result[T, E] either
    Ok(T)
    Error(E)

def Result[T, E: Stringer].unwrap(self) T =
    guard Ok x := self
    elif Error e then panic "Trying to unwrap result, which is error {e}"

    x