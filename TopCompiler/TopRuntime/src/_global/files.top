type FileAcess either
    ReadFile
    WriteFile

def FileAcess.toString(self) string =
    match self with
        ReadFile -> "r"
        WriteFile -> "w"

type ext FILE =

ext c_open_file: |string, string| -> Maybe[&FILE] = "_runtime_c_open_file"
ext c_close_file: |&FILE| -> none = "_runtime_c_close_file"

ext c_read_file: |&FILE, &Context| -> string = "_runtime_read_file"
ext c_write_file: |&FILE, string, &Context| -> none = "_runtime_write_file"

type File =
    c_file: &FILE
    acess: FileAcess

def File.read(&self) string =
    match self.acess with
        ReadFile ->
        _ -> panic "Trying to read from file not set to read"

    c_read_file self.c_file, context

def File.write(&self, s: string) =
    match self.acess with
        WriteFile ->
        _ -> panic "Trying to write to file not set to read"

    c_write_file self.c_file, s, context

def File.free(self) =
    c_close_file self.c_file

def open(filename: string, acess: FileAcess) Maybe[File] =
    match c_open_file filename, acess.toString! with
        Some file ->
            Some File{
                c_file = file
                acess = acess
            }

        None ->
            None