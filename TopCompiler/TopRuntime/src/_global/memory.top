type SizeT is uint

ext _ = '#include <string.h>'
ext memcpy: |&none, &none, SizeT| -> none = 'memcpy'
ext c_alloc: |SizeT| -> &none = 'malloc'
ext c_free: |&none| -> none = 'free'

type Allocator with
    def alloc(SizeT) &none
    def dealloc(&none)
    def clear()

type TemporaryStorage =
    occupied: SizeT
    highest: SizeT
    data: &none
    maxSize: SizeT

def new_TemporaryStorage(maxSize: SizeT) TemporaryStorage =
    TemporaryStorage{
        occupied = 0
        highest = 0
        data = c_alloc maxSize
        maxSize = maxSize
    }


def TemporaryStorage.alloc(&self, size: SizeT) &none =
    occupied := self.occupied
    self.occupied += size

    if self.occupied > self.highest then
        self.highest = self.occupied

    if self.occupied >= self.maxSize then
        log "used more temporary memory than available"

    offsetPtr self.data, occupied

def TemporaryStorage.dealloc(&self, p: &none) =

def TemporaryStorage.resetTo(&self, occupied: SizeT) =
    self.occupied = occupied

    if self.occupied >= self.maxSize then
        log "used more temporary memory than available"

def TemporaryStorage.clear(&self) =
    self.resetTo 0

type Malloc =

def Malloc.alloc(&self, size: SizeT) &none =
    c_alloc size

def Malloc.dealloc(&self, pointer: &none) =
    c_free pointer

def Malloc.clear(&self) =

temporary_storage := new_TemporaryStorage 32384
malloc := Malloc{}

temporary_storage_as_allocator := &temporary_storage as Allocator
malloc_as_allocator := &malloc as Allocator

#addToContext allocator := &temporary_storage_as_allocator
#addToContext longterm_storage := &malloc_as_allocator

def alloc(size: SizeT) &none =
    context.allocator.alloc size

def indexPtr[T](pType: &T, offset: int) &T =
    (offsetPtr pType, offset * sizeof T) cast &T

def box[T](value: T) &T =
    pointer := (context.allocator.alloc sizeof T) cast &T
    *pointer = value

    pointer

def free(p: &none) =
    context.allocator.dealloc p