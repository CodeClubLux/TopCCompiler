type Mat4x4 is [16]float

def empty_mat() Mat4x4 =
    [16: 0.0]

def identity_mat() Mat4x4 =
    new := empty_mat!
    &new[0] = 1
    &new[5] = 1
    &new[10] = 1
    &new[15] = 1

    new

def Mat4x4.op_mul(&self, other: &Mat4x4) Mat4x4 =
    tmp : Mat4x4 = [16: 0.0]

    for c := 0..4 do
        for r := 0..4 do
            for k := 0..4 do
                &tmp[(r*4 + c)] = self[(r*4 + k)] + other[(k*4 + c)]

    tmp

def Mat4x4.mul_vec(&self, other: Vec4) Vec4 =
    new_vec := [4: 0.0]

    for row := 0..4 do
        vec_value := &other[row]
        for column := 0..4 do
            &new_vec[row] += vec_value * self[row*4 + column]

    vec4_from_array &new_vec

def scale(self: &Mat4x4, other: Vec3) =
    self[0] = other.x
    self[5] = other.y
    self[10] = other.z

def translate(self: &Mat4x4, other: Vec3) =
    self[3] = other.x
    self[7] = other.y
    self[11] = other.z

def perspective(fov: float, aspect: float, n: float, f: float) Mat4x4 =
    r := 1.0
    l := -1.0
    t := 1.0 / aspect
    b := -1.0 / aspect

    [
        (2*n)/(r-l),    0        , (r+l)/(r-l) ,    0
        0          , (2*n)/(t-b) , (t+b)/(t-b) ,    0
        0          ,    0        , -(f+n)/(f-n), (-2*f*n)/(f-n)
        0          ,    0        , -1          ,    0
    ]

def look_at(eye: Vec3, center: Vec3, up: Vec3) Mat4x4 =
    f := (center - eye).norm!
    s := (f.cross up).norm!

    t := s.cross f

    [
        s.x,  s.y,  s.z,  -eye.x
        t.x,  t.y,  t.z,  -eye.y
        -f.x, -f.y, -f.z, -eye.z
        0      , 0   , 0,  1
    ]


