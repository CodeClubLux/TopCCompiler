import "shader"
import "math"
import "window"
import "gi"
import "opengl"
import "imageLoader"
import "ecs"

//Global Game struct, contains everything that isnt an entity component and is needed in a global context
type Game =
    window: window.Window

def make_Game() &Game =
    w := window.default
    w.init!

    box Game{
        window = w
    }

#addToContext game := make_Game!

def get_game() &Game =
    context.game

//imported later because game window has to be intialized before these can be called
import "ibl"
import "camera"
import "lights"

def Game.set_shader_scene_params(&self, _shader: shader.Shader) =
    cam := camera.get_camera!
    dir_light := lights.get_dir_light!

    _shader.set_mat4x4 "projection", &cam.projection_matrix
    _shader.set_mat4x4 "view", &cam.view_matrix

    _shader.set_vec3 "dirLight.direction", &dir_light.direction
    _shader.set_vec3 "dirLight.color", &dir_light.color

    context.skybox.set_ibl_params_for _shader

def Game.init(&self) =
    opengl.enable opengl.depth_test
    opengl.enable opengl.multisample
    opengl.enable opengl.texture_cube_map_seamless
    opengl.viewport 0, 0, self.window.width, self.window.height

    while not self.window.should_close! do
        defer context.allocator.reset_to context.allocator.get_occupied!
        self.window.update_inputs!

        gi.clear_to_color gi.ColorBuffer, math.Vec4{ 0.0, 0.0, 0.0 , 1.0 }
        gi.clear gi.DepthBuffer

        camera.get_camera!.update_matrices!

        ecs.update ecs.All

        context.skybox.render!
        ecs.render ecs.All

        self.window.swap_buffers!

def error_callback(source: uint, typ: uint, id: uint, severity: int, length: SizeT, message: &Char) =
    log char_buffer_toString message

opengl.enable opengl.debug_output
opengl.debugMessageCallback error_callback, context


