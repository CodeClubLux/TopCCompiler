ext _ = "#define STB_IMAGE_IMPLEMENTATION"
ext _ = '#include "stb_image.h"'

import "assetManager"

ext stbi_load: |&Char, &int, &int, &int, uint| -> Maybe[&Byte] = "stbi_load"
ext stbi_image_free: |&Byte| -> none = "stbi_image_free"
ext stbi_set_flip_vertically_on_load: |bool| -> none = "stbi_set_flip_vertically_on_load"

from "opengl" import all
import "shader"

type Texture =
    id: uint

cached_textures := assetManager.make_asset_cache::[Texture]!



def load(filename: string) Texture =
    match cached_textures.in_cache filename with
        Some texture -> return texture
        None ->

    stbi_set_flip_vertically_on_load true

    width : int = 0
    height : int = 0
    nr_channels : int = 0
    texture := 0

    genTextures 1, &texture
    bindTexture opengl.texture_2D, texture

    texParameteri texture_2D, texture_wrap_s, repeat
    texParameteri texture_2D, texture_wrap_t, repeat
    texParameteri texture_2D, texture_min_filter, linear_mipmap_linear
    texParameteri texture_2D, texture_mag_filter, linear

    data := match stbi_load filename.to_c_string!, &width, &height, &nr_channels, 0 with
        Some d -> d
        None ->
            panic "Could not load image {filename}"
            0 cast &Byte

    defer stbi_image_free data

    texImage2D texture_2D, 0, rgb, width, height, 0, rgb, unsigned_byte, Some data
    generateMipmap texture_2D

    cached_textures.append filename, Texture{ texture }

def Texture.bind_to(self, num: uint) =
    activeTexture texture0 + num
    bindTexture opengl.texture_2D, self.id


type Cubemap =
    id: uint

def Cubemap.bind_to(self, num: uint) =
    activeTexture texture0 + num
    bindTexture opengl.texture_cube_map, self.id

