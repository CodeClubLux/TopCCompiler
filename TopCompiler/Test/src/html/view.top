type VNode with
    toString: || -> string

type Nothing with

type Patches with
type HtmlElem with
    innerHtml: string
    value: string

type PosAtom[X, T] =
    a: Atom[X]
    pos: Lens[X, T]

def PosAtom[X, T].unary_read(self) T do
    self.pos.query \<-self.a

def PosAtom[X, T].operator_set(self, new: T) do
    self.a.operator_set self.pos.set \<-self.a, new

def PosAtom[X, T].watch(self, f: |T| do none) do
    def func(x: X) do
        f self.pos.query \<-self.a

    self.a.watch func

type Event =
    target: HtmlElem

type Attribute =
    name: string
    value: Nothing

def newAttrib[T](name: string, value: T) Attribute =
    Attribute {name, value}

def onEvent[T](name: string, x: |T, Event| do T, a: Atom[T]) Attribute =
    def clicked(e: Event) do
        a.operator_set x \<-a, e

    Attribute {name, clicked}

ext client _onUrlChange: ||string| do none| do none = "_html_onUrlChange"
ext client page-load-url: string = "window.location.hash.slice(1)"

def onUrlChange[T](func: |T, string| do T, a: Atom[T]) do
    def fired(url: string) do
        a.operator_set func \<-a, url

    _onUrlChange fired

def async[T](x: |T| do T, a: Atom[T]) || do none =
    def fired() do
        a.operator_set x \ <-a

    fired

def ignoreAct[T](f: |T| do T) |T, Event| do T =
    def func(x: T, y: Event) T do
        f x

    func

ext client nextTick: ||| do none| do none = "_nextTick"

def withId[T](f: |T, Event| do T) |int, []T, Event| do []T =
    def func(id: int, m: []T, e: Event) []T do
        let res = (f m[id], e)
        m.set id, res

    func

def mapWithId[T, X](v: |T, int, Atom[X]| -> VNode, arr: []T, a: Atom[X]) VNode =
    def func(id: int) VNode =
        v arr[id], id, a

    [0..arr.length].map func

//ext watchHack: [T]|Atom[T], |T| do none| -> none = "core_watcher"

def mapView[T](v: |T, Atom[T]| -> VNode, model: []T, a: Atom[[]T]) VNode =
    def mapper(idx: int) VNode =
        let result = model[idx]

        let pos = lens []T[idx]
        let newA: Atom[T] = PosAtom{a, pos }

        v result, newA

    [0..model.length].map mapper

def viewFromLens[T, X](v: |X, Atom[X]| -> VNode, model: T, pos: Lens[T, X], a: Atom[T]) VNode =
    v (pos.query model), PosAtom {a, pos}

let style: |string| -> Attribute = newAttrib::[string] "style"
let placeHolder: |string| -> Attribute = newAttrib::[string] "placeholder"
let position = newAttrib::[string] "position"
let _type = newAttrib::[string] "type"
let height = newAttrib::[string] "height"
let width = newAttrib::[string] "width"

let id = newAttrib::[string] "id"

let min = newAttrib::[int] "min"
let max = newAttrib::[int] "max"
let step = newAttrib::[int] "step"
let value = newAttrib::[string] "value"
let href = newAttrib::[string] "href"
let src = newAttrib::[string] "src"

let _float = newAttrib::[string] "float"

let class = newAttrib::[string] "className"

let onClick = onEvent "onclick"
let onInput = onEvent "oninput"
let onChange = onEvent "onchange"

ext client h: |string, []Attribute, VNode| -> VNode = "fromJS(html_hyper)"
ext client createElement: |VNode| -> HtmlElem = "virtualDom.create"
ext client diff: |VNode, VNode| -> Patches = "virtualDom.diff"
ext client patch: |HtmlElem, Patches| do HtmlElem = "toAsync(virtualDom.patch)"

ext client clear: |HtmlElem| do none = "toAsync(clearElement)"

//ext diff: |VNode, VNode| do Patches = "require('virtual-dom/diff');"
//ext patch: |VNode, Patches| do none = "require('virtual-dom/patch');"


ext client cssSelector: |string| -> HtmlElem = "document.querySelector.bind(document)"

let h1 = h "h1"
let h2 = h "h2"
let h3 = h "h3"
let h4 = h "h4"
let h5 = h "h5"
let h6 = h "h6"

let hr = h "hr"

let button = h "button"
let input = h "input"

let noAttrib: []Attribute = []

let div = h "div"

let p = h "p"
let ul = h "ul"
let li = h "li"
let a = h "a"

let image = h "img"
let span = h "span"

ext client _appendChild: |HtmlElem, HtmlElem| do none = "toAsync(html_appendChild)"

def render(newTree: VNode) HtmlElem do
    let rootNode= createElement newTree
    let root = cssSelector "#code"

    _appendChild root, rootNode

    rootNode

def get() do

ext client _handle: || -> none = "html_handle"

def app[T](r: |T, Atom[T]| -> VNode, appstate: Atom[T]) do
    var oldV = r (<-appstate), appstate

    get!

    var root = render oldV

    def rerender(i: T) do
        let newV = r i, appstate

        let patches = diff oldV, newV
        root = patch root, patches

        _handle!

        oldV = newV

    appstate.watch rerender

ext client animateOnVisible: |HtmlElem, string| do none = "html_addClassOnVisible"

