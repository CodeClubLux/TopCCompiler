type VNode with
    toString: || -> string

type Nothing with

type Patches with
type HtmlElem with
    appendChild: |Nothing| do none
    innerHtml: string
    value: string

type Event =
    target: HtmlElem

type Attribute =
    name: string
    value: Nothing

def newAttrib[T](name: string, value: T) Attribute =
    Attribute {name, value}

def onEvent[T](name: string, x: |T, Event| do T, a: Atom[T]) Attribute =
    def clicked(e: Event) do
        a.operator_set x \ <-a, e

    Attribute {name, clicked}

def async[T](x: |T| do T, a: Atom[T]) || do none =
    def fired() do
        a.operator_set x \ <-a

    fired

def ignoreAct[T](f: |T| do T) |T, Event| do T =
    def func(x: T, y: Event) T do
        f x

    func

def withId[T](f: |T, Event| do T) |int, []T, Event| do []T =
    def func(id: int, m: []T, e: Event) []T do
        m.set id, (f m[id], e)

    func

def mapWithId[T, X](v: |T, int, Atom[X]| -> VNode, arr: []T, a: Atom[X]) VNode =
    def func(id: int) VNode =
        v arr[id], id, a

    [0..arr.length].map func

ext watchHack: [T]|Atom[T], |T| do none| -> none = "core_watcher"

def mapView[T](v: |T, Atom[T]| -> VNode, model: []T, a: Atom[[]T]) VNode =
    def mapper(idx: int) VNode =
        def update(newValue: T) do
            a.operator_set(model.set idx, newValue)

        let result = model[idx]
        let newA = newAtom result

        watchHack newA, update

        v result, newA

    [0..model.length].map mapper


let style: |string| -> Attribute = newAttrib::[string] "style"
let placeHolder: |string| -> Attribute = newAttrib::[string] "placeholder"

let onClick = onEvent "onclick"
let onInput = onEvent "oninput"
let onChange = onEvent "onchange"

ext h: |string, []Attribute, VNode| -> VNode = "fromJS(html_h)"
ext createElement: |VNode| -> HtmlElem = "virtualDom.create"
ext diff: |VNode, VNode| -> Patches = "virtualDom.diff"
ext patch: |HtmlElem, Patches| do HtmlElem = "virtualDom.patch"

ext clear: |HtmlElem| do none = "clearElement"

//ext diff: |VNode, VNode| do Patches = "require('virtual-dom/diff');"
//ext patch: |VNode, Patches| do none = "require('virtual-dom/patch');"


ext cssSelector: |string| -> HtmlElem = "document.querySelector.bind(document)"

let h1 = h "h1"
let h2 = h "h2"
let h3 = h "h3"
let h4 = h "h4"
let h5 = h "h5"
let h6 = h "h6"

let button = h "button"
let input = h "input"

let noAttrib = []Attribute

let div = h "div"

let p = h "p"

def render(newTree: VNode) HtmlElem do
    let rootNode= createElement newTree
    let root = cssSelector "#code"

    clear root

    root.appendChild rootNode

    rootNode

def app[T](r: |T, Atom[T]| -> VNode, appstate: Atom[T]) do
    var oldV = r (<-appstate), appstate

    var root = render oldV

    def rerender(i: T) do
        let newV = r i, appstate
        let patches = diff oldV, newV
        root = patch root, patches

        oldV = newV

    appstate.watch rerender