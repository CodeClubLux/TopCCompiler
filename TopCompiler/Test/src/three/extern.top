type Point =
    x: int
    y: int
    z: int

type Renderer =

type Scene =

type Material =

type Camera =
    position: Point
    rotation: Point

type Mesh =
    position: Point
    rotation: Point

type Geometry =

type Nothing with
type Attribute =
    name: string
    value: Nothing

type MaterialAttr =
    name: string
    value: Nothing

def newAttrib[T](name: string, value: T) Attribute =
    Attribute {name, value}

def newMaterialAttrib[T](name: string, value: T) MaterialAttr =
    MaterialAttr {name, value}

type COLOR =
    r: int
    g: int
    b: int

ext newColor: |int| -> COLOR = "th_constructor(th.Color)"

let positionX = newAttrib::[float] "position.x"
let positionY = newAttrib::[float] "position.y"
let positionZ = newAttrib::[float] "position.z"

let rotationX = newAttrib::[float] "rotation.x"
let rotationY = newAttrib::[float] "rotation.y"
let rotationZ = newAttrib::[float] "rotation.z"
let wireframe = newAttrib::[bool] "material.wireframe"
let color = newMaterialAttrib::[int] "color"

ext phongMaterial: |[]MaterialAttr| -> Material  = "th_meshPhongMaterial"

ext scene: |[]Mesh| -> Scene = "th_scene"
ext game-loop: | |int| do none, int, || do none| -> none = "th_fps"
ext _renderer: |string| -> Renderer = "th_init"
ext renderGl: |Renderer, Scene, Camera| do none = "th_render"
ext perspectiveCamera: |int, float, float, int, []Attribute| -> Camera = "th_perspectiveCamera"


ext boxGeometry: |float,float,float| -> Geometry = "th_constructor(th.BoxGeometry)"
ext sphereGeometry: |float,int,int| -> Geometry = "th_constructor(th.SphereGeometry)"

ext hemisphereLight: |int, int, float, []Attribute| -> Mesh = "th_hemisphereLight"

ext mesh: |Geometry, Material, []Attribute| -> Mesh = "th_mesh"
ext combineMeshes: |[]Mesh, []Attribute| -> Mesh = "th_combineMeshes"
def render[T](view: |T, Atom[T]| -> (Scene, Camera), f: |T, int| do T, id: string, a: Atom[T], _fps: int) do
    let renderer: Renderer = _renderer id

    def nextFrame(delta: int) do
        a.operator_set f \<-a, delta
        sleep 0

    def nextView() do
        let res = view \<-a, a
        let _scene = res.0
        let camera = res.1

        renderGl renderer, _scene, camera

    let _res = view \<-a, a
    let __scene = _res.0
    let _camera = _res.1

    renderGl renderer, __scene, _camera
    game-loop nextFrame, _fps, nextView