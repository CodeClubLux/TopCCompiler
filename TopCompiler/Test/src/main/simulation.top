from "html" import (div, h1,app,style,VNode)
from "svg" import (fps,_svg,image,fill,x,y,cx,cy,r,width,height,rect,circle,href)

ext client random: || do float = "toAsync(Math.random)"
//ext client x-dimension: float = "window.innerWidth"
//ext client y-dimension: float = "window.innerHeight"

let x-dimension = 600.0
let y-dimension = 700.0

ext full cos: |float| -> float = "Math.cos"
ext full sin: |float| -> float = "Math.sin"
ext full sqrt: |float| -> float = "Math.sqrt"
ext full atan2: |float, float| -> float = "Math.atan2"
ext full pi: float = "Math.PI"
ext full abs: |float| -> float = "Math.abs"

//model
type Kind either
    Glucose
    Starch
    Flat
    Villi
    Blood

type Pos =
    x: float
    y: float
    x-vel: float
    y-vel: float
    kind: Kind
    size: int

type Model =
    particles: []Pos
    absorbtion: float
    count-villi: int
    count-flat: int


def gen(i: int) Pos do
    let _x = 200.0 + (x-dimension * (toFloat i) / 60.0)
    let _y = (toFloat y-dimension) * random!
    let vel-x = 0 //(if (toInt random! * 2.0) == 0 then 0.05 * random! else -0.05 * random!)
    let vel-y = 0.2
    let kind = Glucose

    Pos{_x,_y,vel-x,vel-y,kind,15}

let walls = [0..(toInt y-dimension) / 30].map |i: int|
        let x-pos = 150.0 * sin (toFloat i)

        if i % 2 == 0 then
            Pos{0.0,i*30,0,0,Flat,10}
        else
            Pos{50.0 + x-pos,i*30,0.2,0,Villi,220}

let flat =  [0..(toInt y-dimension) / 30].map |i|
    Pos{x-dimension - 100.0,i*30,0,0,Flat,0}

def restart() Model do
    let particles = flat + walls + [0..30].serial gen

    Model{
        particles
        2
        0
        0
    }

let app-state = newAtom restart!

//update

let move = |delta: int, model: Pos|
    let isWall = match model.kind with
        Villi -> true
        Flat -> true
        _ -> false

    if isWall and model.x > 150.0 and model.x < 400.0 then
        model{x-vel = -model.x-vel, x = 149}
    elif isWall and model.x < 50.0 then
        model{x-vel = -model.x-vel, x = 51}
    elif model.x < 5.0 then
        model{x = 5.0, x-vel = 0}
    elif model.x > x-dimension - 5.0 then
        model{x = x-dimension - 5.0, x-vel = 0}
    elif model.y > y-dimension - 20.0 then
        model{y = y-dimension- 25.0, y-vel = -model.y-vel }
    elif model.y < 0.0 then
        model{y = 7.0, y-vel = -model.y-vel }
    else
        model{x = model.x + (toFloat delta) * model.x-vel * 0.2, y = model.y + (toFloat delta) * model.y-vel}

def delete(p: []Pos, i: int) []Pos =
    (p.slice 0, i) + (p.slice i+1, p.length - 1)

ext client hack-random: || -> float = "Math.random"

def collision(p: []Pos) []Pos =
    var particles = p
    var maxBalls = p.length
    var _x = 0

    while _x < maxBalls do
        var _y = _x+1
        while _y < maxBalls do
            let a = particles[_x]
            let b = particles[_y]

            let distance_x = abs a.x - b.x
            let distance_y = abs a.y - b.y
            let distance = sqrt distance_x*distance_x+distance_y*distance_y


            if distance < (toFloat a.size + b.size) then
                let _a = Pos{ a.x, (toInt (toFloat a.y) / 60.0) * 60+45, (if a.x > x-dimension/1.5 then 0.5 else -0.5), 0, a.kind, a.size }
                let _b = Pos{ b.x, (toInt (toFloat b.y) / 60.0) * 60+45, (if b.x > x-dimension/1.5 then 0.5 else -0.5), 0, b.kind, b.size }

                particles = match (a.kind,b.kind) with
                    (Glucose,Flat) -> particles.set _x, _a
                    (Flat,Glucose) -> particles.set _y, _b
                    (Villi,Glucose) -> particles.set _y, _b
                    (Glucose,Villi) -> particles.set _x, _a
                    _ ->
                        let res = manage-bounce a, b
                        let tmp = particles.set _x, res[0]
                        tmp.set _y, res[1]

            _y += 1
        _x += 1

    particles


def manage-bounce(ball: Pos, ball2: Pos) []Pos =
    let dx = ball.x - ball2.x
    let dy = ball.y - ball2.y
    let collisionision_angle = (atan2 dy, dx)
    let magnitude_1 = (sqrt ball.x-vel*ball.x-vel+ball.y-vel*ball.y-vel)
    let magnitude_2 = (sqrt ball2.x-vel*ball2.x-vel+ball2.y-vel*ball2.y-vel)
    let direction_1 = (atan2 ball.y-vel, ball.x-vel)
    let direction_2 = (atan2 ball2.y-vel, ball2.x-vel)
    let new_x-vel_1 = magnitude_1*(cos direction_1 - collisionision_angle)
    let new_y-vel_1 = magnitude_1*(sin direction_1 - collisionision_angle)
    let new_x-vel_2 = magnitude_2*(cos direction_2 - collisionision_angle)
    let new_y-vel_2 = magnitude_2*(sin direction_2 - collisionision_angle)

    let final_x-vel_1 = ((1.0 - 1.0)*new_x-vel_1+(1.0+1.0)*new_x-vel_2)/(1.0+1.0)
    let final_x-vel_2 = ((1.0+1.0)*new_x-vel_1+(1.0-1.0)*new_x-vel_2)/(1.0+1.0)
    let final_y-vel_1 = new_y-vel_1
    let final_y-vel_2 = new_y-vel_2

    let ball_x-vel = (cos collisionision_angle)*final_x-vel_1+(cos collisionision_angle+pi/2.0)*final_y-vel_1
    let ball_y-vel = (sin collisionision_angle)*final_x-vel_1+(sin collisionision_angle+pi/2.0)*final_y-vel_1
    let ball2_x-vel = (cos collisionision_angle)*final_x-vel_2+(cos collisionision_angle+pi/2.0)*final_y-vel_2
    let ball2_y-vel = (sin collisionision_angle)*final_x-vel_2+(sin collisionision_angle+pi/2.0)*final_y-vel_2


    let new_y = if ball.y > 0.0 and ball.y < ball2.y then ball.y - 0.25 else ball.y
    let new_y_2 = if ball2.y > 0.0 and ball.y > ball2.y then ball2.y - 0.25 else ball2.y

    let _ball1 = match ball.kind with
        Villi -> ball
        Flat -> ball
        _ -> Pos{ball.x, new_y, ball_x-vel, ball_y-vel, ball.kind, ball.size}

    let _ball2 = match ball2.kind with
        Villi -> ball2
        Flat -> ball2
        _ -> Pos{ball2.x, new_y_2, ball2_x-vel, ball2_y-vel, ball2.kind, ball2.size}

    [
        _ball1
        _ball2
    ]

let update = |model: Model, delta: int| do
    model{
        particles = collision (model.particles.map move delta)
    }

//view
def food(model: Pos) VNode =
    match model.kind with
        Glucose -> <circle r="10" cx=(toString model.x) cy= (toString model.y) fill="red"/>
        Starch -> [3: <circle r="10" cx=(toString model.x) cy= (toString model.y) fill="red"/>]
        Flat -> <rect width="100" height="30" x=(toString model.x) y=(toString model.y)/>
        Villi ->
            <image href="villi.png" width="250" height="30" x=(toString model.x) y=(toString model.y)/>
        Blood -> <div/>

def view(model: Model, a: Atom[Model]) VNode =
    <div>
        <_svg width= (toString x-dimension) height= (toString y-dimension) style="border: 2px solid black;">
            <rect width="155" x="0" y="0" height= (toString y-dimension)/>
            model.particles.map food
        </_svg>
    </div>


fps update, app-state, 60
app view, app-state