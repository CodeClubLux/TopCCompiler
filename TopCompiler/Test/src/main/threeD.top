import "three"

let appstate = newAtom 0.0

def sphere(radios: float, color: int, pos: float) three.Mesh =
    three.mesh $
        three.sphere-geometry radios, 50, 50
        three.phongMaterial \[three.color color]
        [three.position-x pos]

let h1 = sphere 0.5, 0xffffff, -1.0
let h2 = sphere 0.5, 0xffffff, 1.0
let o = sphere 1.0, 0xff0000, 0.0

def particle(x: float) three.Mesh =
    three.combineMeshes \[h1, h2, o], [
        three.rotation-y x
    ]

ext height: float = "window.innerWidth"
ext width: float = "window.innerHeight"

let aspect = width / height

let camera = three.perspectiveCamera 75, height / width, 0.1, 1000, \[
    three.position-z (10.0)
]

let light = three.hemisphereLight (0xFFFFFF),  0x0000, 1.25, \[
    three.position-x 0.75
    three.position-y (10.0)
    three.position-z 0.25
]

def view(rotation: float, a: Atom[float]) (three.Scene, three.Camera) =
    let scene = three.scene \[
        particle rotation
        light
    ]

    (scene, camera)

def update(x: float, delta: int) float do
    x + 0.002 * toFloat delta

three.render view, update, "code", appstate, 60