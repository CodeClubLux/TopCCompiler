import "http"

type Feature =
    id: string
    name: string
    description: string
    image: string

type Part =
    kind: string
    name: string
    rating: int
    price: float
    other: []{name: string, value: string}

def Feature.toString(self) string =
    "Feature({self.id},{self.name},{self.image})"

type PartsPage =
    parts: []Part
    headers: []string
    kind: string

type Home =
    features: []Feature
    headers: []string
    footer: string

type Docs =
    overview: []string
    learn: []string
    packages: []string
    headers: []string
    footer: string

type Kind =
    name: string
    image: string
    selected: Maybe[Part]

type Page either
    Page-home(Home)
    Page-docs(Docs)
    Page-kinds({headers: []string, kinds: []Kind})
    Page-parts(PartsPage)
    Page-part({headers: []string, p: Part})
    Page-not-found()
    Page-Get-Started()

def Part.toString(self) string =
    "Part({self.kind}, {self.name}, {self.rating} stars, ${self.price}, {self.other})"

let headers = ["HOME", "EXAMPLES", "DOCS", "COMMUNITY", "BLOG"]
let footer_text = "All code for this site is written in Top, including the server - Lucas Goetz"

type Routes either
    Query-docs(|Docs| -> http.Response)
    Query-parts(string, string, |[]Part| -> http.Response)
    Query-part(string, |Part| -> http.Response)

def map[T, X](func: |T| -> X, x: []T) []X =
    x.map func

def filter[T](func: |T| -> bool, x: []T, ) []T =
    x.filter func

def reduce[T](func: |T,T| -> T, x: []T) T =
    x.reduce func

def comp[T,X](func: |T| -> X, x: T) X =
    func x

def zip[T](x: []T, y: []T) [][]T =
    var newArr: [][]T = []

    var i = 0
    while i < x.length do
        newArr = newArr.append ([x[i] , y[i]])
        i += 1

    newArr

def append[T](x: T, arr: []T) []T =
    arr.append x

def first[T](x: []T) T =
    x[0]

def toEffect[T, X](f: |T| -> X) |T| do X =
    def func(arg: T) X do
        f arg

    func

//*/