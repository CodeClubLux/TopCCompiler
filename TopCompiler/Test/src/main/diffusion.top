///*
import "svg"
import "html"

type Kind either
    Water
    Coloring

type Particle =
    x: float
    y: float
    limit-x: float
    limit-y: float
    vel-x: float
    vel-y: float
    mass: float
    kind: Kind

type Game =
    particles: []Particle
    speed: int
    water: int
    color: int

ext full random: || do float = "toAsync(Math.random)"
ext full cos: |float| -> float = "Math.cos"
ext full sin: |float| -> float = "Math.sin"
ext full sqrt: |float| -> float = "Math.sqrt"
ext full atan2: |float, float| -> float = "Math.atan2"
ext full pi: float = "Math.PI"
ext full abs: |float| -> float = "Math.abs"

//log 10.toString! + "hello world"

let app-state = newAtom Game{ (serial \[0..100].map defer generate_water), 10, 100, 0 }

def returnId(id: int) int =
    id

//Game{ []Particle, returnId 0 }

def generate_water(id: int) Particle do
    let vel-x = 0.3

    Particle { 100.0+ 7.0 * (toFloat id), 10.0, 800.0, 500.0, 0.0, vel-x, 1.0, Water}

def generate_coloring(id: int) Particle do
    let vel-x = 0.3

    Particle { 100.0+ 7.0 * (toFloat id), 10.0, 800.0, 500.0, 0.0, vel-x, 1.0, Coloring}

def Particle.toString(self) string =
    let kind = match self.kind with
        Water -> "water"
        Coloring -> "coloring"

    "Particle({self.x}, {self.y}, {self.limit-x}, {self.limit-y}, {self.vel-x}, {self.vel-y}, {kind}"

def particle(box: Particle, delta: int) Particle =
    let gravity = 0.13

    if box.x > box.limit-x - 20.0 then
        box {x = box.limit-x - 24.0 , vel-x = -box.vel-x}
    elif box.x < 0.0 then
        box {x = 5.0, vel-x = -box.vel-x}
    elif box.y > box.limit-y - 20.0 then
        box {y = box.limit-y - 24.0, vel-y = -box.vel-y + gravity}
    elif box.y < 0.0 then
        box {y = 5.0, vel-y = -box.vel-y + gravity}
    else
        box {x = box.x + (toFloat delta) * box.vel-x, y = box.y + (toFloat delta) * box.vel-y}

def setX(p: Particle, x: float) Particle =
    Particle {p.x, p.y, p.limit-x, p.limit-y, x, p.vel-y, p.mass, p.kind}

def setY(p: Particle, x: float) Particle =
    Particle {p.x, p.y, p.limit-x, p.limit-y, p.vel-x, x, p.mass, p.kind}

def collision(p: []Particle) []Particle =
    var particles = p
    var maxBalls = p.length
    var x = 0

    while x < maxBalls do
        var y = x+1
        while y < maxBalls do
            let a = particles[x]
            let b = particles[y]

            let distance_x = abs a.x - b.x
            let distance_y = abs a.y - b.y
            let distance = sqrt distance_x*distance_x+distance_y*distance_y

            if distance < 40.0 then
                let res = manage-bounce a, b

                particles = particles.set x, res[0]
                particles = particles.set y, res[1]

            y += 1
        x += 1

    particles

def game-loop(g: Game, delta: int) Game do
    var particles = (g.particles.map particle _, delta)

    Game { (collision particles), g.speed, g.water, g.color}

def render(box: Particle) html.VNode =
    let url = match box.kind with
        Water -> "http://vignette2.wikia.nocookie.net/chemistry/images/d/d1/500px-Water_molecule.svg.png/revision/latest?cb=200100320204351"
        Coloring -> "http://kevinlhanlon.com/images/Blue%20Ball/blue-ball.png"

    svg.image \[
        svg.href url
        svg.width "20"
        svg.height "20"
        svg.x box.x.toString!
        svg.y box.y.toString!
    ]

def manage-bounce(ball: Particle, ball2: Particle) []Particle =
    let dx = ball.x - ball2.x
    let dy = ball.y - ball2.y
    let collisionision_angle = (atan2 dy, dx)
    let magnitude_1 = (sqrt ball.vel-x*ball.vel-x+ball.vel-y*ball.vel-y)
    let magnitude_2 = (sqrt ball2.vel-x*ball2.vel-x+ball2.vel-y*ball2.vel-y)
    let direction_1 = (atan2 ball.vel-y, ball.vel-x)
    let direction_2 = (atan2 ball2.vel-y, ball2.vel-x)
    let new_vel-x_1 = magnitude_1*(cos direction_1 - collisionision_angle)
    let new_vel-y_1 = magnitude_1*(sin direction_1 - collisionision_angle)
    let new_vel-x_2 = magnitude_2*(cos direction_2 - collisionision_angle)
    let new_vel-y_2 = magnitude_2*(sin direction_2 - collisionision_angle)

    let final_vel-x_1 = ((1.0 - 1.0)*new_vel-x_1+(1.0+1.0)*new_vel-x_2)/(1.0+1.0)
    let final_vel-x_2 = ((1.0+1.0)*new_vel-x_1+(1.0-1.0)*new_vel-x_2)/(1.0+1.0)
    let final_vel-y_1 = new_vel-y_1
    let final_vel-y_2 = new_vel-y_2

    let ball_vel-x = (cos collisionision_angle)*final_vel-x_1+(cos collisionision_angle+pi/2.0)*final_vel-y_1
    let ball_vel-y = (sin collisionision_angle)*final_vel-x_1+(sin collisionision_angle+pi/2.0)*final_vel-y_1
    let ball2_vel-x = (cos collisionision_angle)*final_vel-x_2+(cos collisionision_angle+pi/2.0)*final_vel-y_2
    let ball2_vel-y = (sin collisionision_angle)*final_vel-x_2+(sin collisionision_angle+pi/2.0)*final_vel-y_2


    let new_y = if ball.y > 0.0 and ball.y < ball2.y then ball.y - 0.25 else ball.y
    let new_y_2 = if ball2.y > 0.0 and ball.y > ball2.y then ball2.y - 0.25 else ball2.y


    [
        Particle {ball.x, new_y, ball.limit-x, ball.limit-y, ball_vel-x, ball_vel-y, ball.mass, ball.kind}
        Particle {ball2.x, new_y_2, ball2.limit-x, ball2.limit-y, ball2_vel-x, ball2_vel-y, ball2.mass, ball2.kind}
    ]

def changeNumber(kind: Kind, g: Game, e: html.Event) Game do
    let newVal = toInt e.target.value
    let length = g.particles.length

    let final-speed = 1.0/(toFloat 11 - newVal)

    def gen(i: int) Particle do
        match kind with
            Water ->
                let p = generate_water i
                adjust final-speed, p

            Coloring ->
                let p = generate_coloring i
                log p
                adjust final-speed, p


    let res = match kind with
        Water ->
            if newVal > g.water then
                Game { (g.particles.slice 0, g.water) + (serial \[0..newVal - g.water].map defer gen) + (g.particles.slice g.water, 0), g.speed, newVal, g.color }
            elif newVal == 0 then
                Game { (g.particles.slice g.water, 0), g.speed, newVal, g.color }
            else
                Game { (g.particles.slice 0, newVal) + (g.particles.slice g.water, 0), g.speed, newVal, g.color }
        Coloring ->
            if newVal > g.color then
                Game { g.particles + (serial \[0..newVal - g.color].map defer gen), g.speed, g.water, newVal }
            elif newVal == 0 then
                Game { (g.particles.shorten length - g.water), g.speed, g.water, newVal,  }
            else
                Game { (g.particles.shorten g.color - newVal), g.speed, g.water, newVal }

    log "====== should be"
    log "water {res.water}"
    log "color {res.color}"
    log res.water + res.color
    log res.particles.length

    res

def adjust(r: float, p: Particle) Particle =
    let x = p.vel-x * r
    let y = p.vel-y * r

    setY (setX p, x), y

def changeSpeed(g: Game, e: html.Event) Game do
    let speed = toInt e.target.value

    let a = 1.0/(toFloat 11 - speed )
    let b = 1.0/(toFloat 11 - g.speed )
    let final-speed = a / b

    Game {
        g.particles.map adjust final-speed
        speed
        g.water
        g.color
    }

def game(g: Game, a: Atom[Game]) html.VNode =
    html.div html.noAttrib, [
        html.h1 \[], "States of matter simulations, by Lucas Goetz"
        html.h3 \[html.style "display:inline; margin: 2px;"], "{g.water} Water Particles"
        html.h3 \[html.style "display:inline; margin: 2px;"], "{g.color} Food Coloring Particles"
        html.br \[], ""
        html.input \[(html._type "range"), (html.height "10"), (html.width "100"), (html.value toString g.water), (html.min 0), (html.max 200), html.onInput (changeNumber Water), a], ""
        html.input \[(html.style "margin-left: 40px;"), (html._type "range"), (html.height "10"), (html.width "100"), (html.value toString g.color), (html.min 0), (html.max 200), html.onInput (changeNumber Coloring), a], ""

        html.h3 html.noAttrib, "{g.speed * 10 + 4} Degrees Celsius"
        html.input \[(html._type "range"), (html.height "10"), (html.width "100"), (html.min 1), (html.max 10), (html.value "{g.speed}"), html.onInput changeSpeed, a], ""

        svg._svg \[(svg.width "100%"), svg.height "100%"], [
            svg.rect \[(svg.width "800"), (svg.height "500"), (svg.fill "rgba(0,0,0,0.0)"), svg.stroke "black"]
            g.particles.map render
        ]
    ]

html.app game, app-state

svg.fps game-loop, app-state, 60

//*/