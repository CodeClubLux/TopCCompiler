import "html"

type Feature =
    id: string
    name: string
    description: string
    image: string

type App =
    headers: []string
    features: []Feature
    footer: string


let app-state = newAtom App {
    headers = ["EXAMPLES", "DOCS", "COMMUNITY", "BLOG"]
    features = [
        Feature {
            "fet0"
            "A Simple Asynchronous Model",
            "Top allows synchronous looking code to behave asynchronously under the hood.
            Have the performance of callbacks without the pyramid of doom. Use the builtin high performance concurrent datastructes making concurrency a breeze",
            "async.png"
        }

        Feature {
            "fet1"
            "Batteries Included"
            "The Top Compiler comes with great and simple to use tools, from automatically bundles and minifiying all javascript and css, to testing and benchmarking.
            No need to setup complicated compilation pipelines, just use the builtin tools.
            Even an easy to use live hot replacement tool is already included."
            "tools.png"
        }

        Feature {
            "fet2"
            "Safety"
            "Thanks to top's functional nature and it's static type system runtime exceptions are rare.
            Instead the compiler catches errors at compile time and helps the programmer locate them.
            Furthermore, as Top is a full-stack language even requests to the server can be typed, eliminating pain stacking hours of incorrect queries."
            "error.png"
        }
    ]
    footer = "All code for this site is written in Top, including the server - Lucas Goetz"
}

let logo = "arrow.png"

def nav-bar(headers: []string) html.VNode =
    def element(header: string) html.VNode =
        html.li \[html.class "nav-bar"], html.a \[html.class "nav-bar"], header

    html.ul \[html.class "nav-bar"],
        [html.li html.noAttrib,
            html.image \[
                html.src logo
                html.style "width:50px;height:50px;float:left;padding:10px;"
            ], ""
        ] + headers.map element

def features(fet: []Feature) html.VNode =
    def feature(f: Feature) html.VNode =
        html.li \[html.class "container"], html.div \[(html.class "cleared"), (html.style "clear:both"), html.id f.id], [
            html.h2 \[html.style "margin-left: 10%; margin-bottom: 2em;"], f.name

            html.div \[], [
                html.image \[
                    html.src f.image,
                    html.style "width: 50%; height: auto; float: right; padding-right: 10%; margin-left: 5%"
                ], ""
                html.p \[html.style "line-height: 150%; padding-left: 10%;"],
                    f.description
            ]
        ]

    html.ul \[html.class "feature"], fet.map feature

def footer(f: string) html.VNode =
    html.div \[], [
        html.hr \[], ""
        html.h4 \[html.style "line-height: 5em; width: 100%; text-align: center; opacity: 0.4;"], f
    ]

def render(app: App, a: Atom[App]) html.VNode =
    html.div html.noAttrib, [
        html.div \[html.class "background"], [
            nav-bar app.headers
            html.h1 \[html.class "header"], "Top"
            html.h3 \[html.class "header"], "A Language designed for full-stack development"
        ]
        html.h1 \[html.class "sub-header"], "Why Top?"
        features app.features
        footer app.footer
    ]

html.app render, app-state

let fets = (<-app-state).features
let getId = lens Feature.id

let elements = fets.map (getId.query >> ("#"+) >> html.cssSelector)
serial elements.map defer html.animateOnVisible _, "fade-in"

/*
let pictures = newAtom string

def getDataFromServer() do
    let resp = http.get http.request {
        url = "cute-cat.png"
    }

    match res with
        Ok x ->
            pictures <- Picture {
                "cute-cat.png",
                resp.body
            }

        Err e ->

go getDataFromServer!
pictures.watch log
*/













