function http_nodeInit(){var d=0;return function c(b){while(1){switch (d){case 0:;;;;http_response = new http_Response(200,"text/plain","","");http_port = process.env.PORT || 3000;http_server = server_createServer;http_handleQuery = server_handleQuery;http_isQuery = server_isQuery;;return;}}}()}var http_response;var http_port;var http_server;var http_handleQuery;var http_isQuery;function http_Server(c){this.listen=c;}http_Server._fields=["listen"];function http_NodeHTTP(c){this.createServer=c;}http_NodeHTTP._fields=["createServer"];function http_Request(c){this.url=c;}http_Request._fields=["url"];function http_Response(c,d,f){this.status=c;this.contentType=d;this.body=f;}http_Response._fields=["status","contentType","body"];http_Response.prototype.toString=(function(){return http_Response_toString(this)});function http_Response_toString(http_self){;;return ((((((((((((("Response(")+(((http_self).status)).toString()))+(", ").toString()))+(((http_self).contentType)).toString()))+(", ").toString()))+(((http_self).body)).toString()))+(")").toString()));}function http_endResponse(http_x){;;return core_assign(http_response,{body:jsonStringify(http_x)});}function http_toUrl(http_expects){;;return ("query/"+jsonStringify(http_expects(http_endResponse)));}