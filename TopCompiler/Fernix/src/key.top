type Key is u16

type KeyAction either Pressed or Released

def KeyAction.toString(&self) string =
    match *self with
        Pressed -> "pressed"
        Released -> "released"

def from_char(c: char) Key =
    c.toU8!

def KeyAction.op_eq(self, other: KeyAction) bool =
    self.tag == other.tag


type MouseButton either Middle or Right or Left

//Make generic version of this map data type
type KeyActionMap =
    keys: [..]Key
    actions: [..]KeyAction

def KeyActionMap.contains(&self, _key: Key) bool =
    for i := 0..self.keys.length do
        if self.keys[i] == _key then
            return true

    false

def KeyActionMap.insert(&self, _key: Key, value: KeyAction) =
    for i := 0..self.keys.length do
        if self.keys[i] == _key then
            self.actions[i] = value
            return

    self.keys.append _key
    self.actions.append value

def KeyActionMap.op_get(&self, _key: Key) &KeyAction =
    for i := 0..self.keys.length do
        if self.keys[i] == _key then
            return &self.actions[i]

    panic "Key {_key} could not be found!"

    0 cast &KeyAction

def KeyActionMap.clear(&self) =
    self.keys.clear!
    self.actions.clear!

def make_KeyActionMap() KeyActionMap =
    keys := [..]Key
    keys.reserve 10
    keys.allocator = Some &malloc_as_allocator

    actions := [..]KeyAction
    actions.reserve 10
    actions.allocator = Some &malloc_as_allocator

    KeyActionMap{
        keys = keys
        actions = actions
    }

from "glfwWrapper" import (glfw_key_left_shift, glfw_key_right_shift, glfw_key_escape)

lshift := glfw_key_left_shift cast Key
rshift := glfw_key_right_shift cast Key

esc := glfw_key_escape cast Key