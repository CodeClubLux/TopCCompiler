type Mat4x4 is [16]float

def empty_mat() Mat4x4 =
    [16: 0.0]

def identity_mat() Mat4x4 =
    new := empty_mat!
    new[0] = 1
    new[5] = 1
    new[10] = 1
    new[15] = 1

    new

def mul_mat4(a: &Mat4x4, b: &Mat4x4) Mat4x4 =
    r : Mat4x4 = _

    r[0] = a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12]
    r[1] = a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13]
    r[2] = a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14]
    r[3] = a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15]

    r[4] = a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12]
    r[5] = a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13]
    r[6] = a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14]
    r[7] = a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15]

    r[8] = a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12]
    r[9] = a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13]
    r[10] = a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14]
    r[11] = a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15]

    r[12] = a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12]
    r[13] = a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13]
    r[14] = a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14]
    r[15] = a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15]

    r

def Mat4x4.mul_vec4(&self, other: Vec4) Vec4 =
    new_vec := [4: 0.0]

    for row := 0..4 do
        vec_value := other[row]
        for column := 0..4 do
            new_vec[row] += vec_value * self[row*4 + column]

    vec4_from_array &new_vec

def rotate(q: Quat) Mat4x4 =
    a := q.w
    b := q.x
    c := q.y
    d := q.z
    a2 := a * a
    b2 := b * b
    c2 := c * c
    d2 := d * d

    [
        (a2 + b2 - c2 - d2), 2*(b*c - a*d), 2*(b*d + a*c) , 0
        2*(b*c + a*d)      , (a2-b2+c2-d2), 2*(c*d - a*b) , 0
        2*(b*d - a*c)      , 2*(c*d + a*b), (a2-b2-c2+d2) , 0
        0                  , 0            , 0             , 1
    ]

def translate(position: Vec3) Mat4x4 =
    [
        1, 0, 0, position.x
        0, 1, 0, position.y
        0, 0, 1, position.z
        0, 0, 0, 1
    ]

def scale(s: Vec3) Mat4x4 =
    [
        s.x, 0   , 0  , 0
        0  , s.y , 0  , 0
        0  , 0   , s.z, 0
        0  , 0   , 0  , 1
    ]


def perspective(fov: float, aspect: float, n: float, f: float) Mat4x4 =
    a := 1.0 / tan fov / 2.0

    [
        (a / aspect) ,  0  ,   0                   , 0
        0          ,    a   ,  0                   , 0
        0          ,    0   , -((f + n) / (f - n)) , -((2 * f * n) / (f - n))
        0          ,    0   ,   -1                 , 0
    ]

def look_at(eye: Vec3, center: Vec3, up: Vec3) Mat4x4 =
    f := (center - eye).norm!
    s := (f.cross up).norm!

    t := s.cross f

    [
        s.x, s.y, s.z, -eye.x
        t.x, t.y, t.z, -eye.y
        -f.x,-f.y,-f.z, -eye.z
        0 ,  0 , 0,        1
    ]

//tmp_mat := make_mat Vec3{0,0,0}, identity_quat!, Vec3{1,1,1}
//
//for tmp_i := 0..16 do
//    log tmp_mat[tmp_i]
