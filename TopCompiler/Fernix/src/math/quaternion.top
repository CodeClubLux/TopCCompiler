type Quat =
    x: float
    y: float
    z: float
    w: float

def identity_quat() Quat =
    Quat{ 0, 0, 0, 1 }

def Quat.op_add(&self, other: &Quat) Quat =
    Quat{
        self.x + other.x
        self.y + other.y
        self.z + other.z
        self.w + other.w
    }

def Quat.op_sub(&self, other: &Quat) Quat =
    Quat{
        self.x - other.x
        self.y - other.y
        self.z - other.z
        self.w - other.w
    }

def Quat.scale(&self, s: float) =
    Quat{
        self.x * s
        self.y * s
        self.z * s
        self.w * s
    }

def Quat.norm(s) Quat =
    n := sqrt s.x*s.x + s.y*s.y + s.z*s.z + s.w*s.w
    Quat{
        s.x/n
        s.y/n
        s.z/n
        s.w/n
    }

def Quat.inner_product(&a, b: &Quat) float =
    b.x * a.x + b.y * a.y + b.z * a.y + b.w * a.w

def make_quat(angle: float, axis: Vec3) Quat =
    v := axis.scale sin angle / 2

    Quat{
        x = v.x
        y = v.y
        z = v.z
        w = cos angle / 2
    }

def Quat.op_mul(a, b: Quat) Quat =
    Quat{
        w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z
        x = a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y
        y = a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x
        z = a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w
    }

def Quat.unary_sub(quaternion) Quat =
    num2 := (((quaternion.x * quaternion.x) + (quaternion.y * quaternion.z)) + (quaternion.z * quaternion.z)) + (quaternion.w * quaternion.w)
    num := 1.0 / num2

    Quat{
        x = -quaternion.x * num
        y = -quaternion.y * num
        z = -quaternion.z * num
        w = quaternion.w * num
    }

def Quat.mul_vec3(&q, v: Vec3) Vec3 =
    u := Vec3{q.x, q.y, q.z}
    s := q.w

    a := u.scale 2*(u.dot v)
    b := v.scale (s*s - (u.dot u))
    c := (u.cross v).scale 2*s

    a + b + c


def Quat.toString(&self) string =
    "Quat({self.w}, {self.x}, {self.y}, {self.z})"

def Quat.to_euler(using &self) Vec3 =
    heading := 0.0
    attitude := 0.0
    bank := 0.0

    test := x*y + z*w;
    if test > 0.499 then //singularity at north pole
        heading = 2 * atan2 x,w
        attitude = pi/2
        bank = 0
    elif test < (-0.499) then// singularity at south pole
        heading = -2 * atan2 x,w
        attitude = - pi/2
        bank = 0
    else
        sqx := x*x
        sqy := y*y
        sqz := z*z
        heading = atan2 (2*y*w - 2*x*z), (1 - 2*sqy - 2*sqz) // Heading
        attitude = asin 2*test // attitude
        bank = atan2 (2*x*w - 2*y*z), (1 - 2*sqx - 2*sqz) // bank

    Vec3{ x = bank, y = heading, z = attitude }

def quat_look_rotation(lookAt: Vec3, upDirection: Vec3) Quat =
    forward := lookAt
    up := upDirection

    forward = forward.norm!
    up = up - (forward.scale (up.dot forward))
    up = up.norm!

    vector := forward
    vector2 := up.cross vector
    vector3 := vector.cross vector2
    m00 := vector2.x
    m01 := vector2.y
    m02 := vector2.z
    m10 := vector3.x
    m11 := vector3.y
    m12 := vector3.z
    m20 := vector.x
    m21 := vector.y
    m22 := vector.z

    num8 := (m00 + m11) + m22

    if num8 > 0.0 then
        num := sqrt num8 + 1.0
        w := num * 0.5
        num = 0.5 / num;
        Quat{
            x = (m12 - m21) * num
            y = (m20 - m02) * num
            z = (m01 - m10) * num
            w = w
        }
    elif (m00 >= m11) and (m00 >= m22) then
        num7 := sqrt ((1.0 + m00) - m11) - m22
        num4 := 0.5 / num7;

        Quat{
            x = 0.5 * num7
            y = (m01 + m10) * num4
            z = (m02 + m20) * num4
            w = (m12 - m21) * num4
        }
    elif m11 > m22 then
        num6 := sqrt ((1.0 + m11) - m00) - m22
        num3 := 0.5 / num6
        Quat{
            x = (m10 + m01) * num3
            y = 0.5 * num6
            z = (m21 + m12) * num3
            w = (m20 - m02) * num3
        }
    else
        num5 := sqrt ((1.0 + m22) - m00) - m11
        num2 := 0.5 / num5;
        Quat{
            x = (m20 + m02) * num2
            y = (m21 + m12) * num2
            z = 0.5 * num5
            w = (m01 - m10) * num2
        }

def quat_from_euler(vec: Vec3) Quat =
    c1 := cos vec.x/2
    c2 := cos vec.y/2
    c3 := cos vec.z/2

    s1 := sin vec.x/2
    s2 := sin vec.y/2
    s3 := sin vec.z/2

    Quat{
        x = s1 * c2 * c3 + c1 * s2 * s3
        y = c1 * s2 * c3 + s1 * c2 * s3
        z = c1 * c2 * s3 - s1 * s2 * c3
        w = c1 * c2 * c3 - s1 * s2 * s3
    }

def test_quat() =
    log "quaternion test"

    puts_in := Vec3{(radians 0), (radians 45), radians 0}

    out_q := quat_from_euler puts_in
    out := out_q.to_euler!

    log "got: {out}"
    log "expects: {puts_in}"

    //panic "Test complete!"

test_quat!