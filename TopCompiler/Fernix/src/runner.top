import "shader"
import "math"
import "window"
import "gi"
import "opengl"
import "imageLoader"
import "ecs"
import "ibl"
import "camera"
import "lights"
import "input"

def set_shader_scene_params(_shader: shader.Shader) =
    cam := camera.get_camera!
    dir_light := lights.get_dir_light!

    _shader.set_mat4x4 "projection", &cam.projection_matrix
    _shader.set_mat4x4 "view", &cam.view_matrix

    _shader.set_vec3 "dirLight.direction", &dir_light.direction
    _shader.set_vec3 "dirLight.color", &dir_light.color

    ibl.get_skybox!
        .set_ibl_params_for _shader

def init() =
    w := window.get_window!

    opengl.enable opengl.depth_test
    opengl.enable opengl.multisample
    opengl.enable opengl.texture_cube_map_seamless
    opengl.viewport 0, 0, w.width, w.height

    while not w.should_close! do
        defer context.allocator.reset_to context.allocator.get_occupied!

        input
            .get_input!
            .update_inputs!

        gi.clear_to_color gi.ColorBuffer, math.Vec4{ 0.0, 0.0, 0.0 , 1.0 }
        gi.clear gi.DepthBuffer

        camera
            .get_camera!
            .update_matrices!

        ecs.update ecs.All
        ecs.render ecs.All

        w.swap_buffers!

def error_callback(source: uint, typ: uint, id: uint, severity: int, length: SizeT, message: &char) =
    log char_buffer_toString message

opengl.enable opengl.debug_output
opengl.debugMessageCallback error_callback, context


