import "ecs"
import "math"
import "window"
import "transform"
import "layermask"
from "layermask" import all

type Camera =
    near_plane: float
    far_plane: float
    fov: uint

def make_CameraStore() ecs.Store[Camera] =
    ecs.make_Store 10, Camera{
        fov = 60

        near_plane = 0.1
        far_plane = 600
    }

def Camera.update_matrices(&self, world: &ecs.World, params: &ecs.RenderParams) = //@todo move to a system
    entity := (world.transform.by_id ecs.id_of self).expect "Camera missing transform"

    params.proj_matrix = math.perspective
        math.radians self.fov
        (params.width as float) / (params.height as float)
        self.near_plane
        self.far_plane

    euler := entity.rotation.to_euler!
    euler.x = -euler.x
    euler.y = -euler.y

    rotate_m := math.invert math.rotate entity.rotation
    translate_m := math.translate -entity.position

    params.view_matrix = rotate_m * translate_m

def make_default_camera(world: &ecs.World) &Camera =
    (id, entity) := world.make_Entity!
    //entity.layermask = entity.layermask.disable layermask.serialize_layer

    trans := world.transform.make id
    trans.position = math.Vec3{ 0, 2, 1.8 }

    world.camera.make id

def find_default_camera(world: &ecs.World) &Camera =
    match world.camera.get_active world with
        Some x -> x
        None -> make_default_camera world

def get_camera(world: &ecs.World, m: Layermask) &Camera =
    (world.camera.first_in_mask world, m).expect "No Active camera"

//system todo move gizmo to gizmo editor file
import "model"
import "shader"
from "materialSystem" import all
from "math" import all
import "draw"

type MainCameraSystem =
    camera_shader: &shader.Shader
    camera_gizmo: &model.Model
    camera_materials: [1]Material

def make_MainCameraSystem(world: &ecs.World) MainCameraSystem =
    camera_gizmo := model.load_model world, "camera.fbx"
    model.load_in_place world, camera_gizmo

    camera_shader :=  shader.make world, "shaders/pbr.vert", "shaders/diffuse.frag"

    MainCameraSystem{
        camera_gizmo = camera_gizmo
        camera_shader = camera_shader
        camera_materials = [
            Material{
                name = "DefaultMaterial"
                shader = ecs.id_of camera_shader
                params = box [
                    Param_Vec3 (camera_shader.location "material.diffuse"), Vec3{0,0,0.8}
                ]
                state = &draw.default_state
            }
        ]
    }

def MainCameraSystem.update(using &self, world: &ecs.World, params: &ecs.UpdateParams) =
def MainCameraSystem.render(using &self, world: &ecs.World, params: &ecs.RenderParams) =
    m := params.layermask
    (get_camera world, params.layermask).update_matrices world, params

    if (m.layer_in_mask editor_layer) or (m.layer_in_mask pickable_layer) then
        m = layermask.make_Layermask!
            .enable game_layer

        for (cam, trans) := ecs.filter2 world, &world.camera, &world.transform, m do
            camera_gizmo.render_model_for (ecs.id_of cam), trans, &camera_materials

#endif