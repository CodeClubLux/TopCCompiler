import "ecs"
import "math"
import "window"

type Camera =
    entity: &ecs.Entity

    projection_matrix: math.Mat4x4
    view_matrix: math.Mat4x4

    position: math.Vec3
    direction: math.Vec3

    fov: uint

def Camera.get_entity(&self) &ecs.Entity =
    self.entity

def Camera.render(&self) =
def Camera.update(&self) =

def Camera.update_matrices(&self) =
    w := window.get_window!
    entity := self.get_entity!

    self.projection_matrix = math.perspective
        math.radians self.fov
        (w.width as float) / (w.height as float)
        0.1
        100.0

    target := (entity.rotation.mul_vec3 math.Vec3{0,0,1}).norm!

    rotate_m := math.rotate entity.rotation
    translate_m := math.translate -entity.position

    self.view_matrix = rotate_m * translate_m

import "layermask"

def make_CameraSystem() &ecs.Store[Camera] =
    entity := ecs.make_Entity!
    entity.position = math.Vec3{ 0, 0, 1.8 }
    entity.layermask = layermask.enable entity.layermask, layermask.editor

    system := ecs.make_Store::[Camera] 10

    _ := system.add_component Camera{
        entity = entity

        projection_matrix = math.identity_mat!
        view_matrix = math.identity_mat!

        position = math.Vec3{0,0,0}
        direction = math.Vec3{0,0,0}

        fov = 60

    }

    system

camera_system := make_CameraSystem!

#addToContext camera := &camera_system.components[0]

def get_camera() &Camera =
    context.camera