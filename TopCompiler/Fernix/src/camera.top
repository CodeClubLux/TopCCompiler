import "ecs"
import "math"
import "window"
import "transform"
import "layermask"

type Camera =
    projection_matrix: math.Mat4x4
    view_matrix: math.Mat4x4

    fov: uint

cameras := ecs.make_Store 10, Camera{
    projection_matrix = math.identity_mat!
    view_matrix = math.identity_mat!

    fov = 60
}

def Camera.update_matrices(&self) = //@todo move to a system
    w := window.get_window!
    entity := (transform.transforms.by_id cameras.id_of self).unwrap!

    self.projection_matrix = math.perspective
        math.radians self.fov
        (w.width as float) / (w.height as float)
        0.1
        100.0

    target := (entity.rotation.mul_vec3 math.Vec3{0,0,1}).norm!

    rotate_m := math.rotate entity.rotation
    translate_m := math.translate -entity.position

    self.view_matrix = rotate_m * translate_m

def make_default_camera() &Camera =
    id := ecs.make_ID!

    entity := ecs.entities.make id
    entity.layermask = entity.layermask.disable layermask.serialize_layer

    trans := transform.transforms.make ecs.make_ID!
    trans.position = math.Vec3{ 0, 0, 1.8 }

    cameras.make id

#addToContext camera := make_default_camera!

def get_camera() &Camera =
    context.camera