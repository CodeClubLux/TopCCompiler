import "ecs"
import "math"
import "window"
import "transform"

type Camera =
    transform: &transform.Transform

    projection_matrix: math.Mat4x4
    view_matrix: math.Mat4x4

    fov: uint

def Camera.get_entity(&self) &ecs.Entity =
    self.transform.get_entity!

def Camera.render(&self) =
def Camera.update(&self) =

def Camera.update_matrices(&self) =
    w := window.get_window!
    entity := self.transform

    self.projection_matrix = math.perspective
        math.radians self.fov
        (w.width as float) / (w.height as float)
        0.1
        100.0

    target := (entity.rotation.mul_vec3 math.Vec3{0,0,1}).norm!

    rotate_m := math.rotate entity.rotation
    translate_m := math.translate -entity.position

    self.view_matrix = rotate_m * translate_m

import "layermask"

camera_system := ecs.make_Store make_Camera, 10

def make_Camera(id: ecs.ID) &Camera =
    trans := match transform.transform_system.component_by_id id with
        Some e -> e
        None ->
            trans := transform.make_Transform id
            trans.position = math.Vec3{ 0, 0, 1.8 }

            entity := trans.get_entity!
            entity.layermask = layermask.enable entity.layermask, layermask.editor_layer

            trans

    camera_system.add_component Camera{
        transform = trans

        projection_matrix = math.identity_mat!
        view_matrix = math.identity_mat!

        fov = 60
    }

#addToContext camera := make_Camera ecs.make_ID!
context.camera.get_entity!.layermask = layermask.disable context.camera.get_entity!.layermask, layermask.serialize_layer

def get_camera() &Camera =
    context.camera