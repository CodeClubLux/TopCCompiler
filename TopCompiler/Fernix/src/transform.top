import "ecs"
from "math" import all
from "layermask" import Layermask

type Transform =
    position: math.Vec3
    rotation: math.Quat
    scale: math.Vec3

def make_TransformStore() ecs.Store[Transform] =
    ecs.make_Store 100, Transform{
        position = Vec3{ 0, 0, 0}
        rotation = quat_from_euler Vec3{0, 0, 0}
        scale = Vec3{ 1, 1, 1}
    }

def Transform.compute_model_matrix(&self) Mat4x4 =
    trans := translate self.position
    scal := scale self.scale
    rotation := rotate self.rotation

    trans * rotation * scal

type LocalTransform =
    position: math.Vec3
    rotation: math.Quat
    scale: math.Vec3
    owner: ecs.ID

def make_LocalTransformStore() ecs.Store[LocalTransform] =
    ecs.make_Store 100, LocalTransform{
        position = Vec3{ 0, 0, 0}
        rotation = quat_from_euler Vec3{0,0,0}
        scale = Vec3{ 1, 1, 1}
        owner = 0
    }

def LocalTransform.calc_global_transform(&self, world: &ecs.World) =
    if Some owner_local_trans := world.local_transform.by_id self.owner then
        owner_local_trans.calc_global_transform world

    guard Some owner_trans := world.transform.by_id self.owner
    else return //panic "Owner of local body: {self.owner} is missing transform"

    guard Some trans := world.transform.by_id ecs.id_of self
    else return //panic "Local body: {local_transforms.id_of self} is missing transform"

    trans.scale = owner_trans.scale * self.scale
    trans.rotation = owner_trans.rotation * self.rotation
    position := owner_trans.rotation.mul_vec3 self.position
    trans.position = owner_trans.position + position

type LocalTransformSystem =
def LocalTransformSystem.update(&self, world: &ecs.World, params: &ecs.UpdateParams) =
    for (trans, local) := ecs.filter2 world, &world.transform, &world.local_transform, params.layermask do
        local.calc_global_transform world

def LocalTransformSystem.render(&self, world: &ecs.World, params: &ecs.RenderParams) =