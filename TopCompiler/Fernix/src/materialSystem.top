import "draw"
import "shader"
import "math"
import "texture"
import "ecs"

type Param either
    Param_Vec3(shader.Uniform, math.Vec3)
    Param_Vec2(shader.Uniform, math.Vec2)
    Param_Mat4x4(shader.Uniform, math.Mat4x4)
    Param_Image(shader.Uniform, ecs.ID)
    Param_Cubemap(shader.Uniform, texture.Cubemap)
    Param_Int(shader.Uniform, int)

/*
def Param.toString(&self) string =
    match *self with
        Param_Vec3 name, v -> "{name}: Vec"
        Param_Image name, tex -> "{name}: {tex.filename}"
        _ -> ""
*/

type Material =
    name: string
    shader: ecs.ID
    params: []Param
    state: &draw.State

pbr_shader := shader.make "shaders/pbr.vert", "shaders/pbr.frag"

all_materials := ecs.make_Store 20, Material{
    "default"
    shader = pbr_shader.get_id!
    params = box substance_params "wood_2", "Stylized_Wood"
    state = box draw.State{
        cull = draw.Cull_None
        depth_func = draw.DepthFunc_Lequal
        order = 0
        clear_depth_buffer = false
    }
}

/*
def Material.init(&self) =
    log "initializing material"
    log self.shader.v_filename
    //log self.params

    self.shader.load_in_place!
*/

def material_by_name(materials: []Material, name: string) Maybe[&Material] =
    for i := 0..materials.length do
        m := &materials[i]

        if m.name == name then
            return Some m

    None

def substance_params(folder: string, name: string) [5]Param =
    [
        Param_Image (pbr_shader.location "material.diffuse"), texture.textures.id_of texture.load "{folder}/{name}_basecolor.jpg"
        Param_Image (pbr_shader.location "material.metallic"), texture.textures.id_of texture.load "{folder}/{name}_metallic.jpg"
        Param_Image (pbr_shader.location "material.roughness"), texture.textures.id_of texture.load "{folder}/{name}_roughness.jpg"
        Param_Image (pbr_shader.location "material.normal"), texture.textures.id_of texture.load "{folder}/{name}_normal.jpg"
        Param_Vec2 (pbr_shader.location "transformUVs"), math.Vec2{ 100, 100 }
    ]