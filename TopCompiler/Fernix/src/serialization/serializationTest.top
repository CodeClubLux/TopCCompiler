from "sBuffer" import all

type Test =
    str: string
    arr_static: [3]uint
    arr_both: []uint
    arr_dyn: [..]uint
    f: float
    b: bool
    i: int
    p_i: &int
    p_i2: &int
    maybe_ptr: Maybe[&int]
    maybe_int: Maybe[uint]


log "======"
log (get_type Maybe[uint]).tag_field.offset
log offsetof Maybe[uint], tag

arr := [..]uint

for i := 0..5 do
    arr.append 30

arr_both : []uint = arr
p_i : int = 30

test := Test{ "hello world!", [10, 20, 30], arr_both, arr, 6.4, true, 2, &p_i, &p_i, (None), (Some 60) }

def serialize[T]() =
    log "serialize"

    write_buffer := make_write_Buffer 10000
    defer write_buffer.free!
    write_buffer.write_object (get_type Test), &test

    guard Some f := open "assets\\save_files\\data.tsf", WriteBFile
    else panic "Could not write to save_files"

    f.write write_buffer.string_buffer!
    f.free!

def deserialize[T]() =
    log "deserialize"
    guard Some f2 := open "assets\\save_files\\data.tsf", ReadBFile
    else panic "Could not read save_files"

    read_buffer := make_read_Buffer f2.read!
    defer read_buffer.free!

    f2.free!

    test_r : Test = _
    read_buffer.read_object (get_type Test), &test_r

    log test_r.str
    log test_r.f
    log test_r.b
    log test_r.i
    log test_r.p_i
    log test_r.p_i2
    log test_r.arr_static
    log test_r.arr_both
    log test_r.arr_dyn
    //log test_r.maybe_ptr
    //log test_r.maybe_int

serialize!
deserialize!