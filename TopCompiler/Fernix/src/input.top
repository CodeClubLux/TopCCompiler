import "window"
import "runner"
import "ecs"
from "math" import all
from "key" import all

//Handles all state related to input
type Input =
    first_mouse: bool
    capture_mouse: bool

    mouse_position: Vec2
    mouse_offset: Vec2

    scroll_offset: float

    keys: KeyActionMap
    last_frame_keys: KeyActionMap //@cleanup might want to remove this dynamic array, replace with static

    window: &window.Window

def Input.cursor_pos_callback(&self, mouse_position: Vec2) =
    if self.first_mouse then
        self.mouse_position = mouse_position
        self.first_mouse = false

    if self.capture_mouse then
        xpos := mouse_position.x
        ypos := mouse_position.y

        xoffset := xpos - self.mouse_position.x
        yoffset := self.mouse_position.y - ypos //reversed since y-coordinates go from bottom to top

        self.mouse_offset += Vec2{ xoffset, yoffset }

    self.mouse_position = mouse_position

def Input.to_device_cord(&self, position: Vec2) Vec2 = //Takes mouse postion and transforms into device coordinates
    w := window.get_window!

    Vec2{
        position.x / w.width * 2 - 1
        -(position.y / w.height * 2 - 1)
    }

def Input.key_callback(&self, _key: Key, action: KeyAction) =
    self.keys.insert _key, action

def Input.key_down(&self, _key: char) bool =
    window
        .get_window!
        .key_down _key

def Input.key_pressed(&self, _key: Key) bool =
    if not self.last_frame_keys.contains _key then
        return self.key_down _key

    self.last_frame_keys[_key] == Released and self.key_down _key

def Input.clear(&self) =
    for _key := self.keys.keys do
        value := self.keys.actions[i]

        self.last_frame_keys[_key] = value

    self.keys.clear!

def Input.update_inputs(&s) =
    window
        .get_window!
        .update_inputs!

def make_Input() Input =
    w := window.get_window!

    w.set_cursor_pos_callback window_cursor_pos_callback
    w.set_key_callback window_key_callback

    Input{
        first_mouse = true
        capture_mouse = true

        mouse_position = Vec2{0,0}
        mouse_offset = Vec2{0,0}

        scroll_offset = 0.0

        keys = make_KeyActionMap!
        last_frame_keys = make_KeyActionMap!

        window = w
    }

// external api
#addToContext input := box make_Input!

def get_input() &Input =
    context.input

//might move this to window
def window_cursor_pos_callback(position: Vec2) =
    get_input!.cursor_pos_callback position

def window_key_callback(_key: Key, action: KeyAction) =
    get_input!.key_callback _key, action



