import "opengl"
import "math"
import "vfs"
import "ecs"
import "assetManager"

type Shader =
    v_filename: string
    f_filename: string
    id: uint

    //core shader properties
    irradianceMap: int
    prefilterMap: int
    shadowMaskMap: int
    brdfLUT: int
    model: int
    projection: int
    view: int
    viewPos: int
    dirLight_direction: int
    dirLight_color: int

    v_time_modified: i64
    f_time_modified: i64

    supports_instancing: bool
    instanced: bool
    instanced_version: Maybe[&Shader]

    window_width: int
    window_height: int

def make_ShaderStore() ecs.Store[Shader] =
    ecs.make_Store_with_init 40, Shader{"", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false, None, 0, 0}, Some load_in_place

def Shader.free(self) =
    opengl.deleteProgram self.id

def make_shader(filename: string, source: string, kind: uint, info_log: &char) Result[uint, string] =
    c_source := source.to_c_string!
    shader := opengl.createShader kind

    opengl.shaderSource shader, 1, &c_source, None
    opengl.compileShader shader

    sucess : int = 0
    opengl.getShaderiv shader, opengl.compile_status, &sucess

    if sucess == 0 then
        opengl.getShaderInfoLog shader, 512, None, info_log
        if kind == opengl.vertex_shader then
            return Error "({filename}) Vertex shader compilation: {char_buffer_toString info_log}"
        else
            return Error "({filename}) Fragment shader compilation: {char_buffer_toString info_log}"

    Ok shader

def read_shader_file(filename: string) Maybe[File] =
    vfs.open_file filename, ReadFile with

def load_in_place_with_err(self: &Shader) Maybe[string] =
    //if self.id > 0 then return //already initialized
    log "loading shader {self.v_filename}, {self.f_filename}"

    vfilename := self.v_filename
    ffilename := self.f_filename

    new_context := *context
    new_context.allocator = &malloc_as_allocator

    #pushContext new_context do
        guard Some vshader_f := read_shader_file vfilename
        else return Some "Could not read vertex file: {vfilename}"

        guard Some fshader_f := read_shader_file ffilename
        else return Some "Could not read fragment file: {ffilename}"

        //log "==================================================================="
        //log vfilename
        //log self.instanced

        isInstanced :=
            if self.instanced then "#version 440 core\n#define IS_INSTANCED\n#line 0\n"
            else "#version 440 core\n#line 0\n"

        vshader_source := vshader_f.read!
        defer free vshader_source.to_c_string!

        vshader_source = isInstanced + vshader_source
        defer free vshader_source.to_c_string!

        fshader_source := fshader_f.read!
        defer free fshader_source.to_c_string!

        fshader_source = isInstanced + fshader_source
        defer free fshader_source.to_c_string!

        vshader_f.free!
        fshader_f.free!

        //log vshader_source

        //defer context.allocator.reset_to context.allocator.get_occupied!

        //vertex shader
        sucess : int = 0
        info_log := (alloc 512 * sizeof char) cast &char
        defer free info_log

        guard Ok vertex_shader := make_shader vfilename, vshader_source, opengl.vertex_shader, info_log
        elif Error e then return Some e

        guard Ok fragment_shader := make_shader ffilename, fshader_source, opengl.fragment_shader, info_log
        elif Error e2 then return Some e2

        id := opengl.createProgram!

        opengl.attachShader id, vertex_shader
        opengl.attachShader id, fragment_shader

        opengl.linkProgram id

        opengl.getPromgramiv id, opengl.link_status, &sucess

        if sucess == 0 then
            opengl.getProgramInfoLog id, 512, None, info_log
            panic "({vfilename}) Shader linkage: {char_buffer_toString info_log}"

        opengl.deleteShader vertex_shader
        opengl.deleteShader fragment_shader

        self.id = id



    self.irradianceMap = self.uniform_location "irradianceMap"
    self.prefilterMap = self.uniform_location "prefilterMap"
    self.brdfLUT = self.uniform_location "brdfLUT"
    self.model = self.uniform_location "model"
    self.projection = self.uniform_location "projection"
    self.view = self.uniform_location "view"
    self.viewPos = self.uniform_location "viewPos"
    self.dirLight_direction = self.uniform_location "dirLight.direction"
    self.dirLight_color = self.uniform_location "dirLight.color"

    self.shadowMaskMap = self.uniform_location "shadowMaskMap"
    self.window_width = self.uniform_location "window_width"
    self.window_height = self.uniform_location "window_height"

    self.v_time_modified = vfs.time_modified self.v_filename
    self.f_time_modified = vfs.time_modified self.f_filename

    if self.supports_instancing and not self.instanced then
        s := box_longterm *self
        s.instanced = true

        if Some err := load_in_place_with_err s then
            return Some err

        s.instanced_version = None
        self.instanced_version = Some s

    None

def load_in_place(world: &ecs.World, self: &Shader) =
    if self.v_filename == "shaders/pbr.vert" then
        self.instanced = false
        self.supports_instancing = true

    if Some e := load_in_place_with_err self then
        panic e

def make(world: &ecs.World, vfilename: string, ffilename: string) &Shader =
    if Some s := assetManager.in_cache &world.shader, world, vfilename + ffilename then
        return s

    (id, _) := world.make_Entity!
    s := world.shader.make id //Shader{ vfilename, ffilename, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    if vfilename == "shaders/pbr.vert" then
        s.supports_instancing = true
    s.v_filename = vfilename
    s.f_filename = ffilename
    load_in_place world, s
    s

def Shader.get_filename(&self) string =
    self.v_filename + self.f_filename

def Shader.bind(&self) =
    opengl.useProgram self.id

type Uniform =
    name: string
    id: int

def Shader.location(&self, name: string) Uniform =
    Uniform{ name, opengl.getUniformLocation self.id, name.to_c_string!}

def Shader.uniform_location(&self, name: string) int =
    opengl.getUniformLocation self.id, name.to_c_string!

def Shader.set_mat4x4(&self, loc: int, value: &math.Mat4x4) =
    opengl.uniformMatrix4fv loc, 1, true, value.data

def Shader.set_vec3(&self, loc: int, value: &math.Vec3) =
    opengl.uniform3fv loc, 1, &(value.x)

def Shader.set_vec2(&self, loc: int, value: &math.Vec2) =
    opengl.uniform2fv loc, 1, &(value.x)

def Shader.set_int(&self, loc: int, value: int) =
    opengl.uniform1i loc, value

def Shader.set_float(&self, loc: int, value: float) =
    opengl.uniform1f loc, value

from "layermask" import Layermask

type ShaderReloadSystem =
def ShaderReloadSystem.render(&self, world: &ecs.World, params: &ecs.RenderParams) =
def ShaderReloadSystem.update(&self, world: &ecs.World, params: &ecs.UpdateParams) =
    m := params.layermask

    if not m.layer_in_mask layermask.editor_layer then return

    m = m.enable layermask.game_layer

    for shad := ecs.filter world, &world.shader, m do
        v_time_modified := vfs.time_modified shad.v_filename
        f_time_modified := vfs.time_modified shad.f_filename

        if v_time_modified > shad.v_time_modified or f_time_modified > shad.f_time_modified then
            log "recompiled shader: {shad.v_filename}"
            previous := shad.id

            if Some e := load_in_place_with_err shad then
                log "Error: {e}"
                shad.v_time_modified = v_time_modified
                shad.f_time_modified = f_time_modified //avoid printing errors a billion times
            else
                opengl.deleteProgram previous
