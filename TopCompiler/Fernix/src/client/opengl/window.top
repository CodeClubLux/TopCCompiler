import "opengl"
from "glfwWrapper" import all
from "math" import Vec2
from "key" import (Key, KeyAction, MouseButton)
from "nuklearWrapper" import all
import "vfs"

def framebuffer_size_callback(window_ptr: &GLFWwindow, width: int, height: int) =
    context = (glfwGetWindowUserPointer window_ptr) cast &Context

    w := get_window!
    w.width = width cast uint
    w.height = height cast uint

type Window =
    title: string
    vSync: bool
    full_screen: bool
    width: uint
    height: uint

    window_ptr: Maybe[&GLFWwindow]

    cursor_pos_callback: Maybe[|Vec2| -> none]
    key_callback: Maybe[|Key, KeyAction| -> none]
    dropped_filepaths: []string

    shadow_resolution: uint

def error_callback(error: int, description: &char) =
    log char_buffer_toString description

def Window.init(&self) =
    glfwSetErrorCallback error_callback
    glfwInit!
    //glfwWindowHint glfw_opengl_forward_compat, opengl.gl_true
    glfwWindowHint glfw_context_version_major, 4
    glfwWindowHint glfw_context_version_minor, 4
    glfwWindowHint glfw_opengl_profile, glfw_opengl_core_profile

    glfwWindowHint glfw_samples, 4

    log "trying to init window {self.height}, {self.width}, {self.title}"

    c_title := self.title.to_c_string!

    self.window_ptr =
        if self.full_screen then
            monitor := glfwGetPrimaryMonitor!
            glfwCreateWindow self.width, self.height, c_title, monitor, None
        else
            glfwCreateWindow self.width, self.height, c_title, None, None

    guard Some window_ptr := self.window_ptr
    else
        glfwTerminate!
        panic "Failed to create window"

    glfwMakeContextCurrent window_ptr
    glfwSetFramebufferSizeCallback window_ptr, framebuffer_size_callback
    glfwSetCursorPosCallback window_ptr, cursor_pos_callback
    glfwSetKeyCallback window_ptr, key_callback
    glfwSetInputMode window_ptr, glfw_cursor, glfw_cursor_disabled
    glfwSetDropCallback window_ptr, drop_callback

    if not (opengl.gladLoadGLLoader getProcAddress) then
        panic "Failed to initialize GLAD!"

    //debugging opengl
    //opengl.enable opengl.debug_output
    opengl.enable opengl.debug_output_synchronous //GL_DEBUG_OUTPUT_SYNCHRONOUS
    opengl.debugMessageCallback gl_error_callback, context

    log "initialized opengl"
    self.update_context!

    if self.vSync then
        glfwSwapInterval 1
    else
        glfwSwapInterval 0

def Window.update_context(&self) =
    glfwSetWindowUserPointer self.window_ptr.unwrap!, context

def Window.capture_mouse(&self, capture: bool) =
    glfwSetInputMode self.window_ptr.unwrap!, glfw_cursor,
        if capture then glfw_cursor_disabled
        else glfw_cursor_normal

def Window.should_close(&self) bool =
    match self.window_ptr with
        Some window_ptr -> glfwWindowShouldClose window_ptr
        None -> true

def Window.update_inputs(&self) =
    self.dropped_filepaths = []
    glfwPollEvents!

def Window.swap_buffers(&self) =
    glfwSwapBuffers self.window_ptr.unwrap!

from "key" import all

//callbacks
def cursor_pos_callback(glfw_window: &GLFWwindow, x: f64, y: f64) =
    context = (glfwGetWindowUserPointer glfw_window) cast &Context
    w := get_window!

    if Some callback := w.cursor_pos_callback then
        callback Vec2{ x cast float, y cast float }

def key_callback(glfwWindow: &GLFWwindow, _key: int, scancode: int, action: int, mods: int) =
    context = (glfwGetWindowUserPointer glfwWindow) cast &Context
    w := get_window!

    if Some callback := w.key_callback then
        if action == glfw_press then
            callback (_key cast Key), Pressed
        elif action == glfw_release then
            callback (_key cast Key), Released

def drop_callback(glfwWindow: &GLFWwindow, count: int, c_paths: &&char) =
    arr := [..]string
    context = (glfwGetWindowUserPointer glfwWindow) cast &Context
    w := get_window!

    for i := 0..(count cast uint) do
        path := char_buffer_toString *(indexPtr c_paths, i)
        buffer := (alloc (path.length + 1) * sizeof char) cast &char
        memcpy buffer, *(indexPtr c_paths, i), (path.length + 1) * sizeof char

        arr.append char_buffer_toString buffer

    w.dropped_filepaths = arr

def Window.set_cursor_pos_callback(&self, func: |Vec2| -> none) =
    self.cursor_pos_callback = Some func

def Window.set_key_callback(&self, func: |Key, KeyAction| -> none) =
    self.key_callback = Some func

def Window.close(&self) =
    match self.window_ptr with
        Some window_ptr ->
            glfwDestroyWindow window_ptr
            glfwTerminate!

        None ->

def Window.key_down(&self, _key: Key) bool =
    (glfwGetKey self.window_ptr.unwrap!, _key) == glfw_press

def Window.mouse_button_down(&self, button: MouseButton) bool =
    glfw_mouse_button := match button with
        Middle -> glfw_mouse_button_middle
        Right -> glfw_mouse_button_right
        Left -> glfw_mouse_button_left

    (glfwGetMouseButton self.window_ptr.unwrap!, glfw_mouse_button) == glfw_press

ext nk_window_options: uint = "NK_WINDOW_SCALABLE|NK_WINDOW_MINIMIZABLE|NK_WINDOW_TITLE|NK_WINDOW_BORDER"

#addToContext window := 0 cast &Window

def make_Window() &Window =
    popup := Window{
        title = "Fernix"
        vSync = true
        full_screen = false
        width = 500
        height = 500
        window_ptr = None
        cursor_pos_callback = None
        key_callback = None
        dropped_filepaths = []
        shadow_resolution = 4096
    }

    popup.init!

    glfwSetInputMode popup.window_ptr.unwrap!, glfw_cursor, glfw_cursor_normal

    let max_vertex_buffer = 512 * 1024
    let max_element_buffer = 128 * 1024

    nk_ptr := nk_glfw3_init popup.window_ptr.unwrap!, nk_glfw3_install_callbacks

    atlas : &nk_font_atlas = _
    nk_glfw3_font_stash_begin &atlas
    segoe := nk_font_atlas_add_from_file atlas, (vfs.asset_path "fonts/segoeui.ttf").to_c_string!, 40, None
    nk_glfw3_font_stash_end!
    nk_style_set_font nk_ptr, &segoe.handle

    width := 3840.0
    height := 2160.0
    vSync := true
    fullscreen := false
    shadow_resolution := 4096.0

    context.window = &popup

    while not popup.should_close! do
        popup.update_inputs!
        nk_glfw3_new_frame!

        window_rect := nk_make_rect 0, 0, 500, 500

        if nk_begin nk_ptr, "Settings".to_c_string!, window_rect, nk_window_options then
            ratios := [1.0]

            nk_layout_row nk_ptr, nk_dynamic, 40, ratios.length, ratios.data
            width = nk_propertyf nk_ptr, "#width".to_c_string!, 0, width, 4000, 100, 0.1

            nk_layout_row nk_ptr, nk_dynamic, 40, ratios.length, ratios.data
            height = nk_propertyf nk_ptr, "#height".to_c_string!, 0, height, 4000, 100, 0.1

            nk_layout_row nk_ptr, nk_dynamic, 40, ratios.length, ratios.data
            shadow_resolution = nk_propertyf nk_ptr, "#shadow resolution".to_c_string!, 0, shadow_resolution, 5000, 100, 0.1

            nk_layout_row nk_ptr, nk_dynamic, 40, ratios.length, ratios.data
            vSync = not vSync
            vSync = (nk_check_label nk_ptr, "vSync".to_c_string!, vSync cast int) cast bool
            vSync = not vSync

            nk_layout_row nk_ptr, nk_dynamic, 40, ratios.length, ratios.data
            fullscreen = not fullscreen
            fullscreen = (nk_check_label nk_ptr, "fullscreen".to_c_string!, fullscreen  cast int) cast bool
            fullscreen = not fullscreen

        nk_end nk_ptr

        nk_glfw3_render nk_anti_aliasing_on, max_vertex_buffer, max_element_buffer

        popup.swap_buffers!

    nk_glfw3_shutdown!
    popup.close!

    w := box Window{
        title = "Fernix"
        vSync = vSync
        full_screen = fullscreen
        width = width cast uint
        height = height cast uint
        window_ptr = None
        cursor_pos_callback = None
        key_callback = None
        dropped_filepaths = []
        shadow_resolution = shadow_resolution cast uint
    }

    w.init!

    w

context.window = make_Window!

def get_window() &Window =
    context.window

//debugging
def gl_error_callback(source: uint, typ: uint, id: uint, severity: int, length: SizeT, message: &char) =
    //defer context.allocator.reset_to context.allocator.get_occupied!

    //log "=========== memory usage: {context.longterm_storage.get_occupied!}"
    log char_buffer_toString message