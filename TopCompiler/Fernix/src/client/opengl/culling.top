from "draw" import DrawCommand
import "runner"
from "math" import all
import "ecs"

type AABB =
    min: Vec3
    max: Vec3

def make_AABB() AABB =
    AABB{
        max = Vec3{-flt_max, -flt_max, -flt_max}
        min = Vec3{flt_max, flt_max, flt_max}
    }

def AABB.verts(&self) [8]Vec4 =
    [
        Vec4{self.max.x, self.max.y, self.max.z, 1}
        Vec4{self.min.x, self.max.y, self.max.z, 1}
        Vec4{self.max.x, self.min.y, self.max.z, 1}
        Vec4{self.min.x, self.min.z, self.max.z, 1}

        Vec4{self.max.x, self.max.y, self.min.z, 1}
        Vec4{self.min.x, self.max.y, self.min.z, 1}
        Vec4{self.max.x, self.min.y, self.min.z, 1}
        Vec4{self.min.x, self.min.z, self.min.z, 1}
    ]

def AABB.apply(&self, matrix: &Mat4x4) AABB =
    verts := self.verts!

    aabb := make_AABB!

    for v := verts do
        v = matrix.mul_vec4 v

        aabb.update v.to_vec3!

    aabb

def AABB.update_aabb(&self, other: &AABB) =
    verts := other.verts!

    for v := verts do
        self.update Vec3{v.x, v.y, v.z}

def AABB.update(&self, v: Vec3) =
    self.max.x = max self.max.x, v.x
    self.max.y = max self.max.y, v.y
    self.max.z = max self.max.z, v.z

    self.min.x = min self.min.x, v.x
    self.min.y = min self.min.y, v.y
    self.min.z = min self.min.z, v.z

def extract_planes(o_mat: &Mat4x4) [6]Vec4 =
    mat := o_mat.transpose!

    planes : [6]Vec4 = _

    for i := 0..4 do planes[0][i] = mat[i * 4 + 3] + mat[i * 4 + 0]
    for i := 0..4 do planes[1][i] = mat[i * 4 + 3] - mat[i * 4 + 0]
    for i := 0..4 do planes[2][i] = mat[i * 4 + 3] + mat[i * 4 + 1]
    for i := 0..4 do planes[3][i] = mat[i * 4 + 3] - mat[i * 4 + 1]
    for i := 0..4 do planes[4][i] = mat[i * 4 + 3] + mat[i * 4 + 2]
    for i := 0..4 do planes[5][i] = mat[i * 4 + 3] - mat[i * 4 + 2]

    planes

def purge(commands: []DrawCommand, params: &ecs.RenderParams) []DrawCommand =
    survived_purge := [..]DrawCommand

    proj_view := params.proj_matrix * params.view_matrix

    frustumPlanes := extract_planes &proj_view

    for cmd := commands do

        purged_transforms := [..]Mat4x4
        purged_aabb := [..]Maybe[AABB]

        for instance := 0..cmd.aabb.length do
            guard Some aabb := cmd.aabb[instance]
            else
                purged_transforms.append cmd.transform_m[instance]
                purged_aabb.append cmd.aabb[instance]
                continue

            cull := false

            for planeID := 0..6 do
                planeNormal := Vec3{frustumPlanes[planeID].x, frustumPlanes[planeID].y, frustumPlanes[planeID].z}
                planeConstant := frustumPlanes[planeID].w;

                // Check each axis (x,y,z) to get the AABB vertex furthest away from the direction the plane is facing (plane normal)
                axisVert: Vec3 = _

                // x-axis
                if frustumPlanes[planeID].x < 0 then    // Which AABB vertex is furthest down (plane normals direction) the x axis
                    axisVert.x = aabb.min.x // min x plus tree positions x
                else
                    axisVert.x = aabb.max.x // max x plus tree positions x

                // y-axis
                if frustumPlanes[planeID].y < 0 then    // Which AABB vertex is furthest down (plane normals direction) the y axis
                    axisVert.y = aabb.min.y // min y plus tree positions y
                else
                    axisVert.y = aabb.max.y // max y plus tree positions y

                // z-axis
                if frustumPlanes[planeID].z < 0 then   // Which AABB vertex is furthest down (plane normals direction) the z axis
                    axisVert.z = aabb.min.z // min z plus tree positions z
                else
                    axisVert.z = aabb.max.z // max z plus tree positions z

                // Now we get the signed distance from the AABB vertex that's furthest down the frustum planes normal,
                // and if the signed distance is negative, then the entire bounding box is behind the frustum plane, which means
                // that it should be culled
                if (planeNormal.dot axisVert) + planeConstant < 0 then
                    cull = true
                    // Skip remaining planes to check and move on to next tree
                    break

            if not cull then
                purged_transforms.append cmd.transform_m[instance]
                purged_aabb.append cmd.aabb[instance]

        if purged_transforms.length > 0 then
            survived_purge.append cmd{
                transform_m = purged_transforms
                aabb = purged_aabb
            }

    survived_purge