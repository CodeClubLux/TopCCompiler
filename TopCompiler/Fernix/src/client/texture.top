ext _ = "#define STB_IMAGE_IMPLEMENTATION"
ext _ = '#include "stb_image.h"'

import "stbi"
import "assetManager"
from "opengl" import all
import "shader"
import "vfs"
import "ecs"
import "layermask"

type TextureID is uint

type Texture =
    filename: string
    texture_id: TextureID

textures := ecs.make_Store_with_init 50, Texture{"", 0}, Some load_in_place

def make_Texture(id: ecs.ID) &Texture =
    entity := match ecs.entities.by_id id with
        Some x -> x
        None -> ecs.make_Entity id

    entity.layermask = layermask.make_Layermask!
        .enable layermask.serialize_layer

    textures.make id

def Texture.get_filename(&self) string =
    self.filename

def Texture.dont_serialize(&self) =
    guard Some entity := ecs.entities.by_id textures.id_of self
    else panic "Trying to make texture not serialize, however could not find entity"

    entity.layermask = entity.layermask.disable layermask.serialize_layer

def load_in_place(tex: &Texture) =
    log "loading in place {tex.filename}"
    filename := tex.filename
    real_filename := vfs.asset_path tex.filename

    stbi.set_flip_vertically_on_load true

    width : int = 0
    height : int = 0
    nr_channels : int = 0
    texture_id := 0

    genTextures 1, &texture_id
    bindTexture opengl.texture_2D, texture_id

    texParameteri texture_2D, texture_wrap_s, repeat
    texParameteri texture_2D, texture_wrap_t, repeat
    texParameteri texture_2D, texture_min_filter, linear_mipmap_linear
    texParameteri texture_2D, texture_mag_filter, linear

    guard Some data := stbi.load real_filename.to_c_string!, &width, &height, &nr_channels, 3
    else panic "Could not load image {filename}"

    nr_channels = 3

    internal_color_format :=
        if nr_channels == 1 then red
        elif nr_channels == 2 then rg
        elif nr_channels == 4 then rgba
        else rgb

    if nr_channels != 3 then
        log nr_channels

    texImage2D texture_2D, 0, rgba, width, height, 0, internal_color_format, unsigned_byte, Some data
    generateMipmap texture_2D

    stbi.image_free data

    tex.texture_id = texture_id

def load(filename: string) &Texture =
    if Some texture := assetManager.in_cache textures, filename then
        return texture

    texture := make_Texture ecs.make_ID!
    texture.filename = filename

    load_in_place texture

    texture

def Texture.bind_to(self, num: uint) =
    activeTexture texture0 + num
    bindTexture opengl.texture_2D, self.texture_id

type Cubemap =
    id: uint

def Cubemap.bind_to(self, num: uint) =
    activeTexture texture0 + num
    bindTexture opengl.texture_cube_map, self.id

