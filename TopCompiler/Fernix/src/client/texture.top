ext _ = "#define STB_IMAGE_IMPLEMENTATION"
ext _ = '#include "stb_image.h"'

import "stbi"
import "assetManager"
from "opengl" import all
import "shader"
import "vfs"
import "ecs"
import "layermask"

type TextureID is uint

type Texture =
    filename: string
    texture_id: TextureID

textures := ecs.make_Store 20, Texture{"", 0}

def make_Texture(id: ecs.ID) &Texture =
    entity := match ecs.entities.by_id id with
        Some x -> x
        None -> ecs.make_Entity id

    entity.layermask = layermask.make_Layermask!

    textures.make id

def Texture.get_filename(&self) string =
    self.filename

def load(filename: string) &Texture =
    real_filename := vfs.asset_path filename

    if Some texture := assetManager.in_cache textures, filename then
        return texture

    stbi.set_flip_vertically_on_load true

    width : int = 0
    height : int = 0
    nr_channels : int = 0
    texture_id := 0

    genTextures 1, &texture_id
    bindTexture opengl.texture_2D, texture_id

    texParameteri texture_2D, texture_wrap_s, repeat
    texParameteri texture_2D, texture_wrap_t, repeat
    texParameteri texture_2D, texture_min_filter, linear_mipmap_linear
    texParameteri texture_2D, texture_mag_filter, linear

    guard Some data := stbi.load real_filename.to_c_string!, &width, &height, &nr_channels, 0
    else panic "Could not load image {filename}"

    defer stbi.image_free data

    internal_color_format :=
        if nr_channels == 1 then red
        elif nr_channels == 2 then rg
        else rgb

    if nr_channels != 3 then
        log nr_channels

    texImage2D texture_2D, 0, rgb, width, height, 0, internal_color_format, unsigned_byte, Some data
    generateMipmap texture_2D

    texture := make_Texture ecs.make_ID!
    texture.filename = filename
    texture.texture_id = texture_id

    texture

def Texture.bind_to(self, num: uint) =
    activeTexture texture0 + num
    bindTexture opengl.texture_2D, self.texture_id

type Cubemap =
    id: uint

def Cubemap.bind_to(self, num: uint) =
    activeTexture texture0 + num
    bindTexture opengl.texture_cube_map, self.id

