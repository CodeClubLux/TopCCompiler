import "draw"
import "shader"
import "math"
import "texture"
import "ecs"

type Param either
    Param_Vec3(shader.Uniform, math.Vec3)
    Param_Vec2(shader.Uniform, math.Vec2)
    Param_Mat4x4(shader.Uniform, math.Mat4x4)
    Param_Image(shader.Uniform, ecs.ID)
    Param_Cubemap(shader.Uniform, texture.Cubemap)
    Param_Int(shader.Uniform, int)
    Param_Float(shader.Uniform, float)

type Material =
    name: string
    shader: ecs.ID
    params: []Param
    state: &draw.State

def make_DefaultMaterial(world: &ecs.World) Material =
    pbr_shader := shader.make world, "shaders/pbr.vert", "shaders/pbr.frag"

    Material{
        name = "default"
        shader = ecs.id_of pbr_shader
        params = box substance_params world, pbr_shader, "wood_2", "Stylized_Wood"
        state = &draw.default_state
    }

def material_by_name(materials: []Material, name: string) Maybe[&Material] =
    for i := 0..materials.length do
        m := &materials[i]

        if m.name == name then
            return Some m

    None

def substance_params(world: &ecs.World, shad: &shader.Shader, folder: string, name: string) [5]Param =
    [
        Param_Image (shad.location "material.diffuse"), ecs.id_of texture.load world, "{folder}/{name}_basecolor.jpg"
        Param_Image (shad.location "material.metallic"), ecs.id_of texture.load world, "{folder}/{name}_metallic.jpg"
        Param_Image (shad.location "material.roughness"), ecs.id_of texture.load world, "{folder}/{name}_roughness.jpg"
        Param_Image (shad.location "material.normal"), ecs.id_of texture.load world, "{folder}/{name}_normal.jpg"
        Param_Vec2 (shad.location "transformUVs"), math.Vec2{ 100, 100 }
    ]