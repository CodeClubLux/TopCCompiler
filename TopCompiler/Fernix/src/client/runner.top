import "window"
import "shader"
import "math"
import "texture"
import "ecs"
import "ibl"
import "camera"
import "lights"
import "input"
import "time"
import "layermask"
import "editor"
import "ui"
from "transform" import (transforms, local_transform_system)
import "draw"
import "renderPass"
import "physics"
import "shadow"

def get_camera() &camera.Camera =
    context.camera

def set_shader_scene_params(_shader: &shader.Shader) =
    cam := context.camera //camera.get_camera!
    trans := (transforms.by_id camera.cameras.id_of cam).unwrap!

    dir_light := lights.get_dir_light!

    _shader.set_mat4x4 _shader.projection, &cam.projection_matrix
    _shader.set_mat4x4 _shader.view, &cam.view_matrix
    _shader.set_vec3 _shader.viewPos, &trans.position

    _shader.set_vec3 _shader.dirLight_direction, &dir_light.direction
    _shader.set_vec3 _shader.dirLight_color, &dir_light.color

    _shader.set_float _shader.window_width, window.get_window!.width
    _shader.set_float _shader.window_height, window.get_window!.height

    context.current_pass.set_shader_params _shader

import "ui"

def game_mask() layermask.Layermask =
    if editor.in_editor! then layermask.editor_layer
    else layermask.game_layer

def in_editor() bool =
    editor.in_editor!

def init() =
    log "initializing"
    w := window.get_window!
    //ui_ctx := ui.get_ui!

    defer w.close!
    // defer ui_ctx.free!
    defer ecs.serialize!
    defer context.allocator.free_allocator!
    defer physics.physics_system.free!

    local_transform_system.update_transforms layermask.make_Layermask!.enable layermask.game_layer

    while not w.should_close! do
        defer context.allocator.reset_to context.allocator.get_occupied!
        //update all systems
        //@todo move these systems into the entity component system

        time.update_delta_time!

        mask := game_mask!
        render_mask := layermask.make_Layermask!
            .enable mask
            .enable layermask.game_layer

        input.clear!
        input.update_inputs!

        ecs.update layermask.make_Layermask!.enable mask

        local_transform_system.update_transforms render_mask

        context
            .camera
            .update_matrices!

        //render scene
        renderPass.render_all!

