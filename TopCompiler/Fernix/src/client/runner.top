import "window"
import "shader"
import "math"
import "texture"
import "ecs"
import "ibl"
import "camera"
import "lights"
import "input"
import "time"
import "layermask"
import "editor"
import "renderPass"
import "ui"

def set_shader_scene_params(_shader: shader.Shader) =
    cam := camera.get_camera!
    dir_light := lights.get_dir_light!

    _shader.set_mat4x4 "projection", &cam.projection_matrix
    _shader.set_mat4x4 "view", &cam.view_matrix
    _shader.set_vec3 "viewPos", &cam.transform.position

    _shader.set_vec3 "dirLight.direction", &dir_light.direction
    _shader.set_vec3 "dirLight.color", &dir_light.color

    ibl.get_skybox!
        .set_ibl_params_for _shader

import "ui"

def game_mask() layermask.Layermask =
    edit := editor.get_editor!

    if edit.in_editor then layermask.editor_layer
    else layermask.game_layer

def init() =
    log "initializing"
    w := window.get_window!
    ui_ctx := ui.get_ui!

    defer w.close!
    defer ui_ctx.free!
    defer context.allocator.free_allocator!

    while not w.should_close! do
        defer context.allocator.reset_to context.allocator.get_occupied!
        //update all systems
        //@todo move these systems into the entity component system

        mask := game_mask!

        inp := input.get_input!
        inp.clear!
        inp.update_inputs!

        time.update_delta_time!
        editor.editor.update!
        ecs.update layermask.enable layermask.make_Layermask!, mask

        camera
            .get_camera!
            .update_matrices!

        //render scene
        renderPass.render_all!

def error_callback(source: uint, typ: uint, id: uint, severity: int, length: SizeT, message: &char) =
    //log char_buffer_toString message

opengl.enable opengl.debug_output
opengl.debugMessageCallback error_callback, context


