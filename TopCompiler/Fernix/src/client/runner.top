import "window"
import "shader"
import "math"
import "texture"
import "ecs"
import "ibl"
import "camera"
import "lights"
import "input"
import "time"
import "layermask"
import "editor"
import "ui"
from "transform" import transforms
import "draw"
import "renderPass"

def set_shader_scene_params(_shader: shader.Shader) =
    cam := camera.get_camera!
    trans := (transforms.by_id camera.cameras.id_of cam).unwrap!

    dir_light := lights.get_dir_light!

    _shader.set_mat4x4 "projection", &cam.projection_matrix
    _shader.set_mat4x4 "view", &cam.view_matrix
    _shader.set_vec3 "viewPos", &trans.position

    _shader.set_vec3 "dirLight.direction", &dir_light.direction
    _shader.set_vec3 "dirLight.color", &dir_light.color

    ibl.get_skybox!
        .set_ibl_params_for _shader

import "ui"

def game_mask() layermask.Layermask =
    if editor.in_editor! then layermask.editor_layer
    else layermask.game_layer

def init() =
    log "initializing"
    w := window.get_window!
    //ui_ctx := ui.get_ui!

    defer w.close!
    // defer ui_ctx.free!
    defer ecs.serialize!
    defer context.allocator.free_allocator!

    while not w.should_close! do
        defer context.allocator.reset_to context.allocator.get_occupied!
        //update all systems
        //@todo move these systems into the entity component system

        mask := game_mask!
        render_mask := layermask.make_Layermask!
            .enable mask
            .enable layermask.game_layer

        input.clear!
        input.update_inputs!

        time.update_delta_time!
        ecs.update layermask.make_Layermask!.enable mask

        camera
            .get_camera!
            .update_matrices!

        //render scene
        renderPass.render_all!

        //renderPass.render_all!



