import "model"
import "opengl"
import "buffer"
from "materialSystem" import all
import "shader"
import "ecs"
from "math" import all
import "layermask"
import "culling"

type Primitives =
    cube: &model.Model
    sphere: &model.Model
    plane: &model.Model

def make_Primitives(world: &ecs.World) Primitives =
    Primitives{
        cube = model.load_model world, "cube.fbx"
        sphere = model.load_model world, "sphere.fbx"
        plane = make_plane world
    }

def make_plane(world: &ecs.World) &model.Model =
    (id, e) := world.make_Entity!

    e.layermask = e.layermask.disable layermask.serialize_layer

    local_plane := world.model.make id
    local_plane.path = "plane.fbx"

    vertices := [
        (Vec3{1, 1, 0}, Vec2{1,1})
        (Vec3{1, -1, 0}, Vec2{1,0})
        (Vec3{-1, -1, 0}, Vec2{0,0})
        (Vec3{-1, 1, 0}, Vec2{0,1})
    ]

    indices := [
        0, 1, 3
        1, 2, 3
    ]

    new_vertices := [..]model.Vertex
    new_vertices.reserve vertices.length

    for (position, tex_coord) := vertices do
        new_vertices.append model.Vertex{
            position = position
            tex_coord = tex_coord
            normal = Vec3{0,0,-1}
            tangent = Vec3{0,0,0}
            bitangent = Vec3{0,0,0}
        }

    local_plane.meshes = box [
        model.make_Mesh new_vertices, (box indices), culling.make_AABB!, 0
    ]

    local_plane

def render_cube(params: &ecs.RenderParams) =
    self := params.primitives.cube.meshes[0]

    self.buffer.bind!
    opengl.drawElements opengl.triangles, self.indices.length, opengl.unsigned_int, 0

def render_sphere(params: &ecs.RenderParams) =
    self := params.primitives.sphere.meshes[0]

    self.buffer.bind!
    opengl.drawElements opengl.triangles, self.indices.length, opengl.unsigned_int, 0

def render_quad(params: &ecs.RenderParams) =
    self := params.primitives.plane.meshes[0]

    self.buffer.bind!
    opengl.drawElements opengl.triangles, self.indices.length, opengl.unsigned_int, 0

