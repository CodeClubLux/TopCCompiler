from "modelSettings" import all
import "ui"
import "input"
import "key"
import "editor"
import "model"
import "ecs"
import "layermask"
import "window"
import "vfs"
import "transform"
import "events"

type ModelAssetTabEvents either
    SelectedModel(uint)

type ModelAssetTab =
    ui_mesg_queue: events.MesgQueue[ModelAssetTabEvents]
    selected_id: int
    filter: string

def make_ModelAssetTab() ModelAssetTab =
    ModelAssetTab{
        ui_mesg_queue = events.make_MesgQueue::[ModelAssetTabEvents] 10
        filter = ""
        selected_id = -1
    }

def ModelAssetTab.update(&self) =
    edit := editor.get_editor!
    win := window.get_window!

    for mesg := self.ui_mesg_queue.messages do
        match mesg with
            SelectedModel id ->
                log "selected model"
                log id
                self.selected_id = id
                edit.select id

    self.ui_mesg_queue.clear!

    for file := win.dropped_filepaths do
        log "dropped filename: {file}"
        new_context := *context
        new_context.allocator = context.longterm_storage

        #pushContext new_context do
            match vfs.to_asset_path file with
                Some x -> file = x
                None ->
                    log "file {file} not in assets folder"
                    continue

            if (file.ends_with ".fbx") or file.ends_with ".obj" then
                id := ecs.make_ID!

                model_setting := make_ModelSetting id
                model_setting.filename = file

                model_setting.load!

                edit.select id
                self.selected_id = id
            elif (file.ends_with ".png") or (file.ends_with ".JPG") or file.ends_with ".jpg" then
                editor.handle_dropped_image file
            elif file.ends_with ".vert" then
                editor.handle_dropped_shader file
            else
                log "Unknown file format {file}"

    if input.key_pressed key.from_char `N` then
        if self.selected_id < 0 then return

        id := ecs.make_ID!
        entity := ecs.make_Entity id

        edit.select id

        guard Some prefab := prefabs.by_id (self.selected_id cast uint)
        else return

        prefab.children.append id

def ModelAssetTab.render_ui(&self, w: &ui.Window) =
    inp := ui.input w, 50, &self.filter
    inp.style.width = ui.Perc 1

    model_settings := model_settings_system.get_all_active!

    for model_setting := model_settings do
        id := model_settings_system.id_of model_setting

        if not model_setting.filename.starts_with self.filter then continue

        selected := id == self.selected_id

        button := ui.button w, model_setting.filename
        button.style.width = ui.Perc 1
        button.selected = selected
        button.ev_handler = Some events.dispatch &self.ui_mesg_queue, ui.Pressed, SelectedModel id
