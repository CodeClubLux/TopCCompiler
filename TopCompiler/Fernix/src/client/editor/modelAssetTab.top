import "ui"
import "input"
import "key"
import "editor"
import "model"
import "ecs"
from "modelSettings" import (model_settings_system, make_ModelSetting)
import "layermask"
import "window"
import "vfs"

type ModelAssetTabEvents either
    SelectedModel(uint)

type ModelAssetTab =
    ui_mesg_queue: ui.MesgQueue[ModelAssetTabEvents]
    selected_id: int
    filter_buffer: &char

def make_ModelAssetTab() ModelAssetTab =
    filter_buffer := (alloc 50 * sizeof char) cast &char
    *filter_buffer = null_terminated

    ModelAssetTab{
        ui_mesg_queue = ui.make_MesgQueue::[ModelAssetTabEvents] 10
        filter_buffer = filter_buffer
        selected_id = -1
    }

def ModelAssetTab.update(&self) =
    inp := input.get_input!
    edit := editor.get_editor!
    win := window.get_window!

    for mesg := self.ui_mesg_queue.messages do
        match mesg with
            SelectedModel id ->
                log "selected model"
                log id
                self.selected_id = id
                edit.select id

    self.ui_mesg_queue.clear!

    for file := win.dropped_filepaths do
        log "dropped filename: {file}"
        new_context := *context
        new_context.allocator = context.longterm_storage

        #pushContext new_context do
            match vfs.to_asset_path file with
                Some x -> file = x
                None ->
                    log "file {file} not in assets folder"
                    continue

            if (file.ends_with ".fbx") or file.ends_with ".obj" then
                id := ecs.make_ID!

                model_setting := make_ModelSetting id
                model_setting.filename = file

                model_setting.load!

                edit.select id
                self.selected_id = id

                log "dropped file {file}"
            elif (file.ends_with ".png") or (file.ends_with ".JPG") or file.ends_with ".jpg" then
                editor.handle_dropped_image file
            else
                log "Unknown file format {file}"

        break

    if inp.key_pressed key.from_char `N` then
        if self.selected_id < 0 then return

        entity := ecs.make_Entity ecs.make_ID!

        edit.select entity.id

        model_system := model.get_model_system!

        guard Some model_setting := model_settings_system.by_id (self.selected_id cast uint)
        else return

        model_renderer := model.make_ModelRenderer entity.id
        model_renderer.materials = model_setting.materials
        model_renderer.model_id = model_setting.model_id

def ModelAssetTab.render_ui(&self, w: &ui.Window) =
    filter := ""

    inp := ui.input w, 50, self.filter_buffer, &filter
    inp.style.width = ui.Perc 1

    model_settings := model_settings_system.get_all_active!

    for model_setting := model_settings do
        id := model_setting.get_entity!.id

        if not model_setting.filename.starts_with filter then continue

        selected := id == self.selected_id

        button := ui.button w, model_setting.filename
        button.style.width = ui.Perc 1
        button.selected = selected
        button.ev_handler = Some ui.dispatch &self.ui_mesg_queue, ui.Pressed, SelectedModel id
