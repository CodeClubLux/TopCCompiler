import "ecs"
import "model"
from "layermask" import all
from "materialSystem" import all
from "math" import all
import "culling"
from "transform" import all
import "draw"
import "shader"
import "editor"
import "primitives"
import "texture"
import "input"
import "key"
from "opengl" import all

type TerrainControlPoint =
    radius: float

type Terrain =
    width: uint
    height: uint
    size_of_block: uint
    show_control_points: bool
    heightmap: Maybe[ecs.ID]
    heightmap_points: [..]float
    max_height: float

def init_terrain(world: &ecs.World, self: &Terrain) =
    self.heightmap = None

def make_ControlPointStore() ecs.Store[TerrainControlPoint] =
    ecs.make_Store 100, TerrainControlPoint{ radius = 50}

def make_TerrainStore() ecs.Store[Terrain] =
    terrain_heightmap_longterm := [..]float
    terrain_heightmap_longterm.allocator = Some context.longterm_storage

    ecs.make_Store_with_init 3, Terrain{
        width = 6
        height = 6
        max_height = 50
        size_of_block = 10
        show_control_points = false
        heightmap = None
        heightmap_points = terrain_heightmap_longterm
    }, Some init_terrain

def load_subdivided(world: &ecs.World, num: uint) &model.Model =
    subdivided_plane := model.load_model world, "subdivided_plane{num}.fbx"
    model.load_in_place world, subdivided_plane

    subdivided_plane.meshes[0].aabb.max.y = 1

    subdivided_plane

type TerrainSystem =
    subdivided_plane8: &model.Model
    subdivided_plane16: &model.Model
    subdivided_plane32: &model.Model
    control_point_material: [1]materialSystem.Material

    flat_shader: &shader.Shader
    terrain_shader: &shader.Shader

def make_TerrainSystem(world: &ecs.World) =
    flat_shader := shader.make world, "shaders/gizmo.vert", "shaders/gizmo.frag"
    terrain_shader := shader.make world, "shaders/terrain.vert", "shaders/terrain.frag"

    TerrainSystem{
        subdivided_plane32 = load_subdivided world, 32
        subdivided_plane16 = load_subdivided world, 16
        subdivided_plane8 = load_subdivided world, 8

        flat_shader = flat_shader
        terrain_shader = terrain_shader

        control_point_material = [materialSystem.Material{
            name = "DefaultMaterial"
            shader = ecs.id_of flat_shader
            state = &draw.draw_over
            params = box [
                materialSystem.Param_Vec3 (flat_shader.location "color"), Vec3{1,1,0}
            ]
        }]
    }

def TerrainSystem.update(&system, world: &ecs.World, params: &ecs.UpdateParams) =
    for (self, self_trans) := ecs.filter2 world, &world.terrain, &world.transform, make_Layermask!.enable game_layer do //todo add editor layermask
        width_quads := 32 * self.width //number of quads horizontally
        height_quads := 32 * self.height //number of quads vertically

        heightmap_tex := match self.heightmap with
            Some id -> (texture.textures.by_id id).expect "texture to heightmap is somehow gone"
            None ->
                id := ecs.make_ID!
                self.heightmap = Some id

                e := ecs.make_Entity id
                e.layermask = e.layermask.disable layermask.serialize_layer

                tex := texture.textures.make id
                tex.filename = "Heightmap"

                texture_id : uint = _

                genTextures 1, &texture_id
                bindTexture opengl.texture_2D, texture_id

                texParameteri texture_2D, texture_wrap_s, clamp_to_edge
                texParameteri texture_2D, texture_wrap_t, clamp_to_edge
                texParameteri texture_2D, texture_min_filter, linear_mipmap_linear
                texParameteri texture_2D, texture_mag_filter, linear
                texParameterf texture_2D, texture_max_anisotropy_ext, 16

                log "loading terrain"
                log self.heightmap_points.length

                if self.heightmap_points.length == 0 then
                    texImage2D texture_2D, 0, red, width_quads, height_quads, 0, red, type_float, None
                else
                    log "setting texture"
                    texImage2D texture_2D, 0, red, width_quads, height_quads, 0, red, type_float, Some self.heightmap_points.data cast &Byte
                    generateMipmap texture_2D

                bindTexture opengl.texture_2D, 0

                log "terrain heightmap: {texture_id}"

                tex.texture_id = texture_id
                tex

        if not editor.in_editor! then return
        if not input.key_pressed key.from_char `B` then continue
        if not self.show_control_points then continue

        log "rebuilding control points"
        control_points_filtered := ecs.filter2 control_points, transforms, make_Layermask!.enable game_layer

        heightmap := &self.heightmap_points
        heightmap.clear!

        heightmap.reserve width_quads * height_quads

        size_per_quad := self.size_of_block / 32

        for h := 0..height_quads do
            for w := 0..width_quads do
                height := 0.0
                total_weight := 0.1

                for (control_point, control_point_trans) := control_points_filtered do
                    pos := Vec2{w, h}
                    p := Vec2{control_point_trans.position.x - self_trans.position.x, control_point_trans.position.z - self_trans.position.z}
                    p = p.scale 1.0 / size_per_quad

                    radius := control_point.radius
                    dist := (p - pos).len!

                    weight := (math.max 0.0, ((radius - dist) / radius)) ^ 1.3
                    total_weight += weight

                    height += weight * (control_point_trans.position.y - (height))
                    //total_weight += weight

                    if dist < 10 then
                        log "========"
                        log "filtered: {control_points_filtered.length}, size per quad: {size_per_quad}"
                        log "weight: {weight}"
                        log "distance: {dist}"
                        log "height from zero: {control_point_trans.position.y - self_trans.position.y}"
                        log "height {control_point_trans.position.y - (self_trans.position.y + height)}"
                        log "interpolated height {height}"

                height = height / total_weight / self.max_height
                heightmap.append height

        bindTexture texture_2D, heightmap_tex.texture_id
        log "rebuilt terrain points"
        texSubImage2D texture_2D, 0, 0, 0, width_quads, height_quads, red, type_float, Some heightmap.data cast &Byte
        generateMipmap texture_2D

def TerrainSystem.render(&system, world: &ecs.World, params: &ecs.RenderParams) =
    for (self, self_trans) := ecs.filter2 terrains, transforms, any_layer do
        /*cmd := model.MultiMeshDrawCommand{ todo instancing
            id = terrains.id_of self
            mesh = &subdivided_plane.meshes[0]
            material = &materialSystem.default_material
            trans = [..]Mat4x4
            aabbs = [..]Maybe[culling.AABB]
        }
        */

        guard Some displacement_tex := self.heightmap
        else continue

        guard Some tex := texture.textures.by_id displacement_tex
        else continue

        lod0 := 0
        lod1 := 0
        lod2 := 0

        for w := 0..self.width do
            for h := 0..self.height do

                t := Transform{
                    position = self_trans.position + Vec3{w * self.size_of_block,0, (h + 1.0) * self.size_of_block}
                    scale = Vec3{self.size_of_block, self.size_of_block, self.size_of_block}
                    rotation = identity_quat!
                }

                mat := box [
                    Material{
                        name = "DefaultMaterial"
                        shader = terrain_shader.get_id!
                        state = &draw.default_state
                        params = box [
                            Param_Image (terrain_shader.location "material.diffuse"), texture.textures.id_of texture.load "wood/Stylized_Wood_basecolor.jpg"
                            Param_Image (terrain_shader.location "material.metallic"), texture.textures.id_of texture.load "wood/Stylized_Wood_metallic.jpg"
                            Param_Image (terrain_shader.location "material.roughness"), texture.textures.id_of texture.load "wood/Stylized_Wood_roughness.jpg"
                            Param_Image (terrain_shader.location "material.normal"), texture.textures.id_of texture.load "wood/Stylized_Wood_normal.jpg"
                            Param_Vec2 (terrain_shader.location "transformUVs"), math.Vec2{ 100, 100 }

                            Param_Image (terrain_shader.location "displacement"), displacement_tex
                            Param_Vec2 (terrain_shader.location "displacement_offset"), math.Vec2{1.0 / self.width * w, 1.0 / self.height * h}
                            Param_Vec2 (terrain_shader.location "displacement_scale"), math.Vec2{1.0 / self.width, 1.0 / self.height}
                            Param_Float (terrain_shader.location "max_height"), self.max_height
                        ]
                    }
                ]

                dist := (t.position - self_trans.position).len!

                if dist < 50 then
                    subdivided_plane32.render_model_for (terrains.id_of self), &t, mat
                    lod0 += 1
                elif dist < 100 then
                    subdivided_plane16.render_model_for (terrains.id_of self), &t, mat
                    lod1 += 1
                else
                    subdivided_plane8.render_model_for (terrains.id_of self), &t, mat
                    lod2 += 1

        //cmd.submit!

        log "rendering: {lod0}, {lod1}, {lod2}"

        if Some selected := editor.get_editor!.selected then
            if not (control_points.by_id selected).is_none! then
                self.show_control_points = true

        if self.show_control_points and editor.in_editor! then
            for (control_point, trans) := ecs.filter2 control_points, transforms, m do
                primitives.cube.render_model_for (control_points.id_of control_point), trans, &control_point_material

        break //only supports one terrain


terrain_system := TerrainSystem{}
ecs.register_system &terrain_system