from "materialSystem" import all
import "ecs"
import "layermask"
import "model"
import "shader"
import "texture"
import "draw"

type ModelSettings =
    filename: string
    materials: []Material
    model_id: Maybe[ecs.ID]

checker_board_texture : Maybe[&texture.Texture] = None

def ModelSettings.load(&self) =
    checker_board := match checker_board_texture with
        Some tex -> tex
        None -> texture.load "wet_street/Pebble_Wet_street_Normal_Map.jpg"

    m := model.load_model self.filename
    self.model_id = Some model.models.id_of m

    materials := [..]Material
    materials.allocator = Some context.longterm_storage

    for mat_name := m.materials do
        longterm_context := *context
        longterm_context.allocator = context.longterm_storage

        #pushContext longterm_context do
            params := box [
                Param_Image "material.diffuse", checker_board
                Param_Image "material.metallic", checker_board
                Param_Image "material.roughness", checker_board
                Param_Image "material.normal", checker_board
            ]

        materials.append Material{
            name = mat_name
            shader = shader.make "shaders/pbr.vert", "shaders/pbr.frag"
            params = params
            state = &draw.default_state
        }

    self.materials = materials

model_settings_system := ecs.make_Store 10, ModelSettings{
    filename = ""
    materials = []
    model_id = None
}

def make_ModelSetting(id: ecs.ID) &ModelSettings =
    entity := match ecs.entities.by_id id with
        Some comp -> comp
        None -> ecs.make_Entity id

    entity.layermask = layermask.make_Layermask!

    model_settings_system.make id
