import "ecs"
import "shader"
import "buffer"
import "model"
import "input"
import "camera"
from "materialSystem" import (Material, Param_Vec3)
from "math" import all
import "key"
import "editor"
from "draw" import draw_over
from "transform" import all

gizmo_shader := shader.make "shaders/gizmo.vert", "shaders/gizmo.frag"
color_location := gizmo_shader.location "color"

translation_model_materials := [
    materialSystem.Material{
        name = "Up"
        shader = gizmo_shader.get_id!
        params = box [
            Param_Vec3 color_location, Vec3{ 1, 0, 0}
        ]
        state = &draw_over
    }
    materialSystem.Material{
        name = "Right"
        shader = gizmo_shader.get_id!
        params = box [
            Param_Vec3 color_location, Vec3{ 0, 1, 0}
        ]
        state = &draw_over
    }
    materialSystem.Material{
        name = "Forward"
        shader = gizmo_shader.get_id!
        params = box [
            Param_Vec3 color_location, Vec3{ 0, 0, 1}
        ]
        state = &draw_over
    }
]

translation_model := model.load_model "gizmo.fbx"
model.load_in_place translation_model

scale_model := model.load_model "scale_gizmo.fbx"

type Axis either
    Up(Vec3)
    Right(Vec3)
    Forward(Vec3)
    NoAxis

def Axis.toString(&self) string =
    match *self with
        Up v -> "Up: {v}"
        Right v -> "Right: {v}"
        Forward v -> "Forward: {v}"
        NoAxis -> "No Axis"

type GizmoType either
    Translate(Axis)
    Scale(Axis)
    Disabled

def GizmoType.selected_axis(&self) bool =
    match *self with
        Translate a -> a.tag != NoAxis.tag
        Scale a -> a.tag != NoAxis.tag
        Disabled -> false

def GizmoType.deselect_axis(&self) =
    match *self with
        Translate a ->
            *self = Translate NoAxis

        Scale a ->
            *self = Scale NoAxis

        Disabled ->

type Gizmo =
    kind: GizmoType

type Ray =
    origin: Vec3
    direction: Vec3
    t: float

//constants
let flt_min = 0.001
let flt_max = 10000.0

type Closest_Point_Result =
    distance: float
    distance_axis: float
    closest_point_1: Vec3
    closest_point_2: Vec3


def Closest_Point_Result.toString(using &self) string =
    "distance: {distance}, closest_point_1: {closest_point_1}, closest_point_2: {closest_point_2}"

def closest_point(r1: &Ray, r2: &Ray) Maybe[Closest_Point_Result] =
    line_point1 := r1.origin
    line_point2 := r2.origin

    line_vec1 := r1.direction
    line_vec2 := r2.direction

    a := line_vec1.dot line_vec1
    b := line_vec1.dot line_vec2
    e := line_vec2.dot line_vec2

    d := a*e - b*b

    if (abs d) > flt_min then
        r := line_point1 - line_point2
        c := line_vec1.dot r
        f := line_vec2.dot r

        s := (b*f - c*e) / d
        t := (a*f - c*b) / d

        closest_point1 := line_point1 + line_vec1.scale (max 0.0, (min r1.t, s))
        closest_point2 := line_point2 + line_vec2.scale (max 0.0, (min r2.t, t))

        Some Closest_Point_Result{
            distance = (closest_point2 - closest_point1).len!
            distance_axis = ((closest_point2 * r1.direction) - (closest_point1 * r1.direction)).len!
            closest_point_1 = line_point1 + line_vec1.scale s
            closest_point_2 = line_point2 + line_vec2.scale t
        }
    else
        None

def handle_gizmo_intersection(position: Vec3, axis: Axis, gizmo_scale: Vec3, vector: &Vec3, reverse: (bool, bool, bool), owner_rot: Quat) Axis =
    (reverse_x, reverse_y, reverse_z) := reverse

    greatest_distance := 0.15  * gizmo_scale.x
    inp := input.get_input!
    cam := context.camera

    right_ray := Ray{
        origin = position
        direction = owner_rot.mul_vec3 Vec3{1,0,0}
        t = gizmo_scale.x
    }

    up_ray := Ray{
        origin = position
        direction = owner_rot.mul_vec3 Vec3{0,1,0}
        t = gizmo_scale.y
    }

    forward_ray := Ray{
        origin = position
        direction = owner_rot.mul_vec3 Vec3{0,0,-1}
        t = gizmo_scale.z
    }

    n := input.to_device_coord inp.mouse_position

    view_proj_inverse := invert (cam.projection_matrix * cam.view_matrix)

    ray_start := (&view_proj_inverse).mul_vec4 Vec4{n.x, n.y, 0, 1}
    ray_start = ray_start.scale (1.0 / ray_start.w)

    ray_end := (&view_proj_inverse).mul_vec4 Vec4{n.x, n.y, 1, 1.0}
    ray_end = ray_end.scale (1.0 / ray_end.w)

    ray_start_vec3 := Vec3{ray_start.x, ray_start.y, ray_start.z}
    ray_end_vec3 := Vec3{ray_end.x, ray_end.y, ray_end.z}

    view_ray := Ray{
        origin = ray_start_vec3
        direction = (ray_end_vec3 - ray_start_vec3).norm!
        t = flt_max
    }

    failed_intersect := Closest_Point_Result{
        distance = 1000
        distance_axis = 1000
        closest_point_1 = Vec3{0,0,0}
        closest_point_2 = Vec3{0,0,0}
    }

    //test for intersection
    i_right := (closest_point &right_ray, &view_ray).default failed_intersect
    i_up := (closest_point &up_ray, &view_ray).default failed_intersect
    i_forward := (closest_point &forward_ray, &view_ray).default failed_intersect

    d1 := i_right.distance
    d2 := i_up.distance
    d3 := i_forward.distance

    if not input.mouse_button_down key.Left then
        translation_model_materials[0].params[0] = Param_Vec3 color_location, Vec3{1,0,0}
        translation_model_materials[1].params[0] = Param_Vec3 color_location, Vec3{0,1,0}
        translation_model_materials[2].params[0] = Param_Vec3 color_location, Vec3{0,0,1}

        log "===="
        log greatest_distance
        log "================"
        log i_right.distance
        log i_up.distance
        log i_forward.distance

        if d1 < d2 and d1 < d3 and d1 < greatest_distance then
            translation_model_materials[2].params[0] = Param_Vec3 color_location, Vec3{1,1,0}
        elif d2 < d1 and d2 < d3 and d2 < greatest_distance then
            translation_model_materials[1].params[0] = Param_Vec3 color_location, Vec3{1,1,0}
        elif d3 < greatest_distance then
            translation_model_materials[0].params[0] = Param_Vec3 color_location, Vec3{1,1,0}

        return NoAxis

    //log last_intersection
    //log i_right.closest_point_1

    match axis with
        //select axis
        NoAxis ->
            if d1 < d2 and d1 < d3 and d1 < greatest_distance then
                translation_model_materials[2].params[0] = Param_Vec3 color_location, Vec3{1,1,0}
                Right i_right.closest_point_1

            elif d2 < d1 and d2 < d3 and d2 < greatest_distance then
                translation_model_materials[1].params[0] = Param_Vec3 color_location, Vec3{1,1,0}
                Up i_up.closest_point_1

            elif d3 < greatest_distance then
                translation_model_materials[0].params[0] = Param_Vec3 color_location, Vec3{1,1,0}
                Forward i_forward.closest_point_1

            else NoAxis

        //move gizmo
        Right last_intersection ->
            if reverse_x then
                vector.x -= (i_right.closest_point_1 - last_intersection).x
            else
                vector.x += (i_right.closest_point_1 - last_intersection).x

            Right i_right.closest_point_1

        Up last_intersection ->
            vector.y += (i_up.closest_point_1 - last_intersection).y
            Up i_up.closest_point_1

        Forward last_intersection ->
            if reverse_z then
                vector.z -= (i_forward.closest_point_1 - last_intersection).z
            else
                vector.z += (i_forward.closest_point_1 - last_intersection).z
            Forward i_forward.closest_point_1

let size_of_gizmo = 0.1

def scale_of_gizmo(diff: Vec3) float =
    size_of_gizmo * diff.len!


import "layermask"
import "events"

type GizmoSystem =

gizmos := ecs.make_Store 1, Gizmo{ Disabled }
main_gizmo := make_Gizmo ecs.make_ID!

def GizmoSystem.handle(&system, mesg: editor.EditorEvents) =
    match mesg with
        InGame true ->
            log "deactivating gizmo, to avoid memory corroputions"
            guard Some main_gizmo_renderer := model.model_renderers.by_id gizmos.id_of main_gizmo
            else return

            main_gizmo_renderer.visible = false

        _ ->

def GizmoSystem.render(&system, m: layermask.Layermask) =
def GizmoSystem.update(&system, m: layermask.Layermask) =
    filtered := ecs.filter3 gizmos, model.model_renderers, transforms, m
    cam := context.camera

    guard Some cam_transform := transforms.by_id camera.cameras.id_of cam
    else return

    for (self, model_renderer, model_renderer_entity) := filtered do
        if input.key_down key.from_char `T` then
            self.kind = Translate NoAxis
        elif input.key_down key.from_char `E` then
            self.kind = Scale NoAxis
        elif input.key_down key.esc then
            self.kind = Disabled

        model_renderer.visible = false

        guard Some target_id := editor.get_editor!.selected
        else return

        owner_rot := math.quat_from_euler Vec3{0,0,0}

        local_position : Maybe[&Vec3] = None
        local_scale : Maybe[&Vec3] = None
        trans_reverse := (false, false, false)

        if Some local := local_transforms.by_id target_id then
            local_position = Some &local.position
            local_scale = Some &local.scale

            if Some owner_trans := transforms.by_id local.owner then
                owner_rot = owner_trans.rotation
                trans_reverse = (true, false, true)

        guard Some target := transforms.by_id target_id
        else return

        guard Some entity := ecs.entities.by_id target_id
        else return

        if not entity.enabled then return

        target_position := local_position.default &target.position
        target_scale := local_scale.default &target.scale

        model_renderer_entity.position = target.position
        model_renderer_entity.rotation = owner_rot
        model_renderer.visible = true

        s := model_renderer_entity.scale
        s_multiplier := Vec3{1,1,1}

        match self.kind with
            Translate axis ->
                self.kind = Translate handle_gizmo_intersection target.position, axis, s, target_position, trans_reverse, owner_rot
                model_renderer.model_id = Some model.models.id_of translation_model
                model_renderer.set_materials &translation_model_materials

            Scale axis ->
                self.kind = Scale handle_gizmo_intersection target.position, axis, s, target_scale, (false, false, true), owner_rot
                model_renderer.model_id = Some model.models.id_of scale_model
                model_renderer.set_materials &translation_model_materials

            Disabled ->
                model_renderer.model_id = None

        if Some local := local_transforms.by_id target_id then
            log "local calc global transform"
            local.calc_global_transform!

        model_renderer_entity.scale = s_multiplier.scale scale_of_gizmo (cam_transform.position - model_renderer_entity.position)
        model_renderer_entity.position = target.position

def make_Gizmo(id: ecs.ID) &Gizmo =
    entity := ecs.make_Entity id
    entity.layermask = layermask.make_Layermask!.enable layermask.editor_layer

    trans:= make_Transform id
    model_renderer := model.make_ModelRenderer id

    gizmos.make id

gizmo_system := GizmoSystem{}
ecs.register_system &gizmo_system