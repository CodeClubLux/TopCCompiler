import "buffer"
from "math" import all
import "ecs"
import "opengl"
import "draw"
import "transform"
from "culling" import all

type Vertex =
    position: Vec3
    normal: Vec3
    tex_coord: Vec2
    tangent: Vec3
    bitangent: Vec3

type Mesh =
    buffer: buffer.VertexBuffer
    vertices: []Vertex
    indices: []uint
    aabb: AABB
    material_id: uint

def Mesh.submit(&mesh) =
    attributes := [
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, position }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, normal }
        buffer.VertexAttrib{ 2, buffer.Float, offsetof Vertex, tex_coord }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, tangent }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, bitangent}
    ]

    mesh.aabb = make_AABB!
    for v := mesh.vertices do
        mesh.aabb.update v.position

    mesh.buffer = buffer.make_vertex_buffer mesh.vertices, mesh.indices, &attributes

def make_Mesh(vertices: []Vertex, indices: []uint, aabb: AABB, material_id: uint) Mesh =
    attributes := [
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, position }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, normal }
        buffer.VertexAttrib{ 2, buffer.Float, offsetof Vertex, tex_coord }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, tangent }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, bitangent}
    ]

    Mesh{
        buffer = buffer.make_vertex_buffer vertices, indices, &attributes
        vertices = vertices
        indices = indices
        aabb = aabb
        material_id = material_id
    }

def Mesh.render(&self, id: ecs.ID, model: &Mat4x4, materials: []Material) =
    material := &materials[self.material_id]

    aabb := Some self.aabb.apply model

    cmd := draw.make_DrawCommand id, model, &aabb, &self.buffer, material
    cmd.submit!