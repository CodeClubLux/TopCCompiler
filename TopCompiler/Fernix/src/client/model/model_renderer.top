import "ecs"
from "materialSystem" import (material_by_name)
from "transform" import all
from "layermask" import Layermask
import "culling"

type MultiMeshDrawCommand =
    id: uint
    mesh: &Mesh
    material: &materialSystem.Material
    trans: [..]Mat4x4
    aabbs: [..]Maybe[culling.AABB]

def MultiMeshDrawCommand.append(using &self, t: &Transform) =
    model_m := t.compute_model_matrix!
    trans.append model_m
    aabbs.append Some mesh.aabb.apply &model_m

def MultiMeshDrawCommand.submit(&self) =
    cmd := draw.make_DrawMultiCommand self.id, self.trans, self.aabbs, &self.mesh.buffer, self.material
    cmd.submit!

//Model Renderer
type ModelRenderer =
    model_id: Maybe[ecs.ID]
    materials: &[]Material
    visible: bool

def make_ModelRendererStore() ecs.Store[ModelRenderer] =
    ecs.make_Store 100, ModelRenderer{
        model_id = None
        visible = true
        materials = box [] as []Material
    }

//def init_model_renderer(self: &ModelRenderer) =
//    for i := 0..self.materials.length do
//        self.materials[i].init!

type ModelRendererSystem =
def ModelRendererSystem.update(&system, world: &ecs.World, params: &ecs.UpdateParams) =
def ModelRendererSystem.render(&system, world: &ecs.World, params: &ecs.RenderParams) =
    for (self, trans) := ecs.filter2 world, &world.model_renderer, &world.transform, params.layermask do
        if not self.visible then continue

        guard Some model_id := self.model_id
        else continue

        guard Some model := world.model.by_id model_id
        else continue

        assert model.materials.length == self.materials.length, "Material length is not the same for model and model renderer"

        model.render_model_for (ecs.id_of trans), trans, *self.materials

def ModelRenderer.set_materials(&self, materials: []Material, world: &ecs.World) =
    materials_in_order := [..]Material

    guard Some model_id := self.model_id
    else return

    guard Some model := world.model.by_id model_id
    else return

    for mat_name := model.materials do
        guard Some mat := material_by_name materials, mat_name
        else panic "Missing material {mat_name} for model {model.path}"

        materials_in_order.append *mat

    self.materials = box materials_in_order as []Material