import "ecs"
from "materialSystem" import (material_by_name)
from "transform" import all
from "layermask" import Layermask

//Model Renderer
type ModelRenderer =
    model_id: Maybe[ecs.ID]
    materials: []Material
    visible: bool

//setup model renderer system
model_renderers := ecs.make_Store 10, ModelRenderer{
    model_id = None
    visible = true
    materials = []
}

type ModelRendererSystem =
def ModelRendererSystem.update(&system, m: Layermask) =
def ModelRendererSystem.render(&system, m: Layermask) =
    for (self, trans) := ecs.filter2 model_renderers, transforms, m do
        guard Some model_id := self.model_id
        else continue

        guard Some model := models.by_id model_id
        else continue

        assert model.materials.length == self.materials.length, "Material length is not the same for model and model renderer"

        model.render_model_for trans, self.materials

model_renderer_system := ModelRendererSystem{}
ecs.register_system &model_renderer_system

def get_model_renderer_system() &ecs.Store[ModelRenderer] =
    model_renderers

def ModelRenderer.set_materials(&self, materials: []Material) =
    materials_in_order := [..]Material

    guard Some model_id := self.model_id
    else return

    guard Some model := models.by_id model_id
    else return

    for mat_name := model.materials do
        guard Some mat := material_by_name materials, mat_name
        else panic "Missing material {mat_name} for model {model.path}"

        materials_in_order.append *mat

    self.materials = materials_in_order

def make_ModelRenderer(id: ecs.ID) &ModelRenderer = model_renderers.make id