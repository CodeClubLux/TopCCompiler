import "assetManager"

ext triangulate_and_flip: uint = "aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_CalcTangentSpace"

def process_mesh(mesh: &aiMesh, scene: &aiScene, materials: &[..]string, bounding_box: &BoundingBox) Result[Mesh,string] =
    vertices := [..]Vertex
    vertices.allocator = Some context.longterm_storage
    vertices.reserve mesh.mNumVertices

    indices := [..]uint
    indices.allocator = Some context.longterm_storage

    aabb := make_AABB!

    for i := 0..mesh.mNumVertices do
        position := indexPtr mesh.mVertices, i

        aabb.update Vec3{ position.x, position.y, position.z }

        tangent := indexPtr mesh.mTangents, i
        bitangent := indexPtr mesh.mBitangents, i

        guard Some coords := *indexPtr mesh.mTextureCoords, 0
        else return Error "Mesh doesn't have uvs"

        first_coords := *indexPtr coords, i
        tex_coords := Vec2{ first_coords.x, first_coords.y }

        normals := indexPtr mesh.mNormals, i

        vertices.append Vertex{
            position = Vec3{ position.x, position.y, position.z }
            tex_coord = tex_coords
            normal = Vec3{ normals.x, normals.y, normals.z }
            tangent = Vec3{ tangent.x, tangent.y, tangent.z }
            bitangent = Vec3{ bitangent.x, bitangent.y, bitangent.z }
        }

    indices_count := 0
    for i := 0..mesh.mNumFaces do
        indices_count += (indexPtr mesh.mFaces, i).mNumIndices

    indices.reserve indices_count
    for i := 0..mesh.mNumFaces do
        face := *indexPtr mesh.mFaces, i
        for j := 0..face.mNumIndices do
            indices.append (*indexPtr face.mIndices, j)


    aMat := *indexPtr scene.mMaterials, mesh.mMaterialIndex
    c_name : aiString = _
    aiGetMaterialString aMat, ai_matkey_name, &c_name

    name : string = char_buffer_toString c_name.data
    name = name.slice 0, name.length //want to copy string

    id : Maybe[uint] = None
    for mat_name := *materials do
        if mat_name == name then
            id = Some i

    material_id := match id with
        Some x -> x
        None ->
            materials.append name
            materials.length - 1

    log "========= got id: {material_id}, vertices: {mesh.mNumVertices}"

    Ok make_Mesh vertices, indices, aabb, material_id

def process_node(node: &aiNode, scene: &aiScene, meshes: &[..]Mesh, materials: &[..]string, bounding_box: &BoundingBox) Maybe[string] =
    meshes.reserve meshes.length + node.mNumMeshes

    for i := 0..node.mNumMeshes do
        mesh_id := *indexPtr node.mMeshes, i
        log mesh_id
        mesh := *indexPtr scene.mMeshes, mesh_id
        match process_mesh mesh, scene, materials, bounding_box with
            Ok x -> meshes.append x
            Error e -> return Some e

    for i := 0..node.mNumChildren do
        if Some e := process_node *(indexPtr node.mChildren, i), scene, meshes, materials, bounding_box then
            return Some e

    None

def maybe_load_in_place(model: &Model) Maybe[string] =
    real_path := vfs.asset_path model.path
    path := model.path

    scene := match aiImportFile real_path.to_c_string!, triangulate_and_flip with
        Some s -> s
        None ->
            panic "Assimp could not load model, {path}, real_path {real_path}"
            0 cast &aiScene

    meshes := [..]Mesh
    meshes.allocator = Some context.longterm_storage

    materials := [..]string
    materials.allocator = Some context.longterm_storage

    log "loading: {real_path}"

    if Some e := process_node scene.mRootNode, scene, &meshes, &materials, &model.bounding_box then
        return Some e

    log "meshes: {meshes.length}"
    log "materials: {materials.length}"

    model.meshes = meshes
    model.materials = materials

    None

def load_in_place(model: &Model) =
    if Some e := maybe_load_in_place model then
        panic e

def load_model(path: string) &Model =
    if Some m := assetManager.in_cache models, path then
        return m

    model := make_Model ecs.make_ID!
    model.path = path

    load_in_place model

    model