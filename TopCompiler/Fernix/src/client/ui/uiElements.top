from "math" import Vec2
from "events" import all
import "ecs"

type UIElement either
    Element_Label(&Label)
    Element_Checkbox(&Checkbox)
    Element_Button(&Button)
    Element_Propertyf(&Propertyf)
    Element_Propertyu(&Propertyu)
    Element_Input(&Input)
    Element_NewLine
    Element_Group(&Window)
    Element_Image(&Image)

def UIElement.toString(&self) string =
    enum_type := get_type UIElement
    enum_type.cases[self.tag].name

type Size either
    Auto
    Px(uint)
    Perc(float)

type Position either
    Absolute(uint, uint)
    Relative
    AbsolutePerc(float, float)

type BoxSize =
    right: Size
    left: Size
    top: Size
    bottom: Size

type Style =
    width: Size
    height: Size
    margin: BoxSize
    padding: BoxSize

type Container with
    def add_child(UIElement)

type Window =
    title: string
    style: Style
    position: Position
    children: [..]UIElement
    closable: bool
    ev_handler: Maybe[events.EventHandler[Event]]

def Window.add_child(&self, child: UIElement) =
    self.children.append child

type Event either
    Pressed
    Closed

def Event.op_eq(self, other: Event) bool =
    self.tag == other.tag

def window(title: string) &Window =
    ui := get_ui!
    self := box Window{
        title = title
        style = Style{
            width = Px 100
            height = Px 100
            margin = BoxSize{ (Px 0), (Px 0), (Px 0), (Px 0)}
            padding = BoxSize{ (Px 0), (Px 0), (Px 0), (Px 0)}
        }
        position = Absolute 0, 0
        children = []
        closable = false
        ev_handler = None
    }
    ui.windows.append self
    self

def group[T: Container](w: &T, title: string) &Window =
    self := box Window{
        title = title
        style = Style{
            width = Auto
            height = Auto
            margin = BoxSize{ (Px 0), (Px 0), (Px 0), (Px 0)}
            padding = BoxSize{ (Px 0), (Px 0), (Px 85), (Px 0)}
        }
        position = Relative
        children = []
        closable = false
        ev_handler = None
    }
    w.add_child Element_Group self
    self

type Label =
    text: string
    style: Style

default_style := Style{
    width = Auto
    height = Auto
    margin = BoxSize{ Auto, Auto, Auto, Auto }
    padding = BoxSize{ Auto, Auto, Auto, Auto }
}

def label[T: Container](w: &T, text: string) &Label =
    self := box Label{
        text = text
        style = default_style
    }

    w.add_child Element_Label self
    self

type Button =
    text: string
    selected: bool
    ev_handler: Maybe[events.EventHandler[Event]]
    style: Style

def button[T: Container](w: &T, text: string) &Button =
    if text.length == 1 and *text.to_c_string! == null_terminated then
        panic "how is this possible"

    self := box Button{
        text = text
        selected = false
        ev_handler = None
        style = default_style
    }

    w.add_child Element_Button self
    self

type Propertyf =
    text: string
    value: &float
    min: float
    max: float
    step: float
    inc_per_pixel: float
    style: Style

def propertyf[T: Container](w: &T, text: string, value: &float) &Propertyf =
    self := box Propertyf{
        text = text
        value = value
        min = -10000
        max = 10000
        step = 0.1
        inc_per_pixel = 0.01
        style = default_style
    }

    w.add_child Element_Propertyf self
    self

type Propertyu =
    text: string
    value: &uint
    min: uint
    max: uint
    step: uint
    inc_per_pixel: float
    style: Style

def propertyu[T: Container](w: &T, text: string, value: &uint) &Propertyu =
    self := box Propertyu {
        text = text
        value = value
        min = 0
        max = 10000
        step = 1
        inc_per_pixel = 0.01
        style = default_style
    }

    w.add_child Element_Propertyu self
    self

type Checkbox =
    text: string
    value: &bool
    style: Style

def checkbox[T: Container](w: &T, text: string, value: &bool) &Checkbox =
    self := box Checkbox{
        text = text
        value = value
        style = default_style
    }

    w.add_child Element_Checkbox self
    self

type Input =
    max_length: uint
    value: &string
    style: Style

def input[T: Container](w: &T, max_length: uint, value: &string) &Input =
    self := box Input{
        max_length = max_length
        value = value
        style = default_style
    }

    w.add_child Element_Input self
    self

def new_line[T: Container](w: &T) =
    w.add_child Element_NewLine

type Image =
    tex_id: ecs.ID
    style: Style
    ev_handler: Maybe[events.EventHandler[Event]]
    selected: bool

def image[T: Container](w: &T, tex_id: ecs.ID) &Image =
    self := box Image{
        tex_id = tex_id
        style = default_style
        ev_handler = None
        selected = false
    }

    w.add_child Element_Image self
    self