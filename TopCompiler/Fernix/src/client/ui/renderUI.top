import "window"
import "vfs"
import "math"
import "input"
import "texture"
import "shader"
import "primitives"
import "math"
import "ecs"

let max_vertex_buffer = 512 * 1024
let max_element_buffer = 128 * 1024

def make_ui() &UI =
    log "making ui"

    w := window.get_window!

    nk_ptr := nk_glfw3_init w.window_ptr.unwrap!, nk_glfw3_install_callbacks

    atlas : &nk_font_atlas = _
    nk_glfw3_font_stash_begin &atlas
    segoe := nk_font_atlas_add_from_file atlas, (vfs.asset_path "fonts/segoeui.ttf").to_c_string!, 40, None
    nk_glfw3_font_stash_end!
    nk_style_set_font nk_ptr, &segoe.handle

    box UI{
        nk_ptr = nk_ptr
        windows = [..]&Window
    }

def UI.render(&self, world: &ecs.World, params: &ecs.RenderParams) =
    nk_glfw3_new_frame!

    for w := self.windows do
        w.render world, params

    nk_glfw3_render nk_anti_aliasing_on, max_vertex_buffer, max_element_buffer

def UI.render_unselectable(&self, world: &ecs.World, params: &ecs.RenderParams) =
    input.get_input!.activate!

    for w := self.windows do
        w.render_unselectable world, params

def UI.new_frame(&self) =
    self.windows = []

def UI.free(&self) =
    nk_glfw3_shutdown!

ext nk_window_options: uint = "NK_WINDOW_SCALABLE|NK_WINDOW_MINIMIZABLE|NK_WINDOW_TITLE|NK_WINDOW_BORDER"
ext nk_group_options: uint = "NK_WINDOW_TITLE"
ext nk_group_closed_options: uint = "NK_WINDOW_TITLE|NK_WINDOW_MINIMIZABLE"

type Block =
    width: uint
    height: uint
    margin_top_left: Vec2
    margin_bottom_right: Vec2

type Row =
    height: uint
    width: uint
    ratios: [..]float
    elements: [..]&UIElement

def Row.render(&self, width: uint, height: uint, world: &ecs.World, params: &ecs.RenderParams) =
    ui := get_ui!

    if self.ratios.length > 0 then
        nk_layout_row ui.nk_ptr, nk_dynamic, self.height, self.ratios.length, self.ratios.data.unwrap!

    for elem := self.elements do
        elem.render (self.width * self.ratios[i]) cast uint, self.height, world, params

def Size.calculate(&self, real_size: uint, auto: uint) uint =
    match *self with
        Px x -> math.min x, real_size
        Perc x -> (real_size * x) cast uint
        Auto -> auto

def Position.calculate(self) Vec2 =
    match self with
        Absolute x, y -> Vec2{ x, y }
        AbsolutePerc x, y -> Vec2{ window.get_window!.width * x, window.get_window!.height * y}
        Relative -> Vec2{0, 0}

def Size.toString(&self) string =
    match *self with
        Px x -> "Px({x})"
        Perc x -> "Perc({x})"
        Auto -> "Auto"

let default_margin = 5
let default_padding = 15

def Style.calculate_block(&self, owner_block: &Block, container_width: uint, container_height: uint) Block =
    margin_left := self.margin.left.calculate owner_block.width, default_margin
    margin_right := self.margin.right.calculate owner_block.width, default_margin
    margin_top := self.margin.top.calculate owner_block.height, default_margin
    margin_bottom := self.margin.bottom.calculate owner_block.height, default_margin

    padding_left := self.padding.left.calculate owner_block.width, default_padding
    padding_right := self.padding.right.calculate owner_block.width, default_padding
    padding_top := self.padding.top.calculate owner_block.height, default_padding
    padding_bottom := self.padding.bottom.calculate owner_block.height, default_padding

    container_width += padding_right + padding_left
    container_height += padding_top + padding_bottom

    width := self.width.calculate owner_block.width, container_width
    height := self.height.calculate owner_block.height, container_height

    Block{
        width = width
        height = height
        margin_top_left = Vec2{ margin_left, margin_top }
        margin_bottom_right = Vec2{ margin_right, margin_bottom }
    }

let assumed_font_width = 15

def calculate_text_width(text: string, style: &Style) uint =
    text.length * assumed_font_width

def calculate_text_height(style: &Style) uint =
    15

default_row := Row{
    height = 0
    width = 0
    ratios = []
    elements = []
}

let default_property_width = 15 * 20 //100
let default_input_width = 15 * 20

//calculate layout
def calculate_layout(rows: &[..]Row, owner_block: &Block, element: &UIElement) =
    current_row :=
        if rows.length == 0 then
            rows.append default_row
            &rows[0]
        else
            &rows[rows.length - 1]

    newline := false
    block := match *element with
        Element_Label l -> l.style.calculate_block owner_block, (calculate_text_width l.text, &l.style), (calculate_text_height &l.style)
        Element_Checkbox l -> l.style.calculate_block owner_block, (calculate_text_width l.text, &l.style), (calculate_text_height &l.style)
        Element_Button l -> l.style.calculate_block owner_block, (calculate_text_width l.text, &l.style), (calculate_text_height &l.style)
        Element_Propertyf l -> l.style.calculate_block owner_block, default_property_width, (calculate_text_height &l.style)
        Element_Propertyu l ->  l.style.calculate_block owner_block, default_property_width, (calculate_text_height &l.style)
        Element_Input l -> l.style.calculate_block owner_block, default_input_width, (calculate_text_height &l.style)
        Element_Image l -> l.style.calculate_block owner_block, 0, 0
        Element_NewLine ->
            newline = true
            Block{ 0, 0, Vec2{0,0}, Vec2{0,0}}

        Element_Group g ->
            group_width := 0
            group_height := 0

            g_rows := [..]Row

            for child := g.children do
                calculate_layout &g_rows, owner_block, &g.children[i]

            for row := g_rows do
                group_width += row.width
                group_height += row.height + default_margin

            g.style.calculate_block owner_block, group_width, group_height

    if newline then
        rows.append default_row
        return

    if current_row.width + block.width > owner_block.width then
        rows.append default_row
        current_row = &rows[rows.length - 1]

    current_row.width += block.width
    current_row.ratios.append block.width / owner_block.width
    current_row.elements.append element
    current_row.height = math.max block.height, current_row.height

def UIElement.render(&self, width: uint, height: uint, world: &ecs.World, params: &ecs.RenderParams) =
    match *self with
        Element_Checkbox l -> l.render!
        Element_Label l -> l.render!
        Element_Button l -> l.render!
        Element_Propertyf l -> l.render!
        Element_Propertyu l -> l.render!
        Element_Input l -> l.render!
        Element_NewLine ->
        Element_Image l -> l.render world, params
        Element_Group g ->
            ui := get_ui!

            options := if g.closable then nk_group_closed_options else nk_group_options

            val := nk_group_begin ui.nk_ptr, g.title.to_c_string!, options
            if val == 1 then
                //_ := nk_group_begin ui.nk_ptr, g.title.to_c_string!, options

                g.style.width = Px width
                g.style.height = Px height

                empty_block := Block{ width, height, Vec2{0,0}, Vec2{0,0}}

                block: Block = _
                rows := g.calculate_layout &empty_block, width, height, &block

                for row := rows do
                    row.render block.width, block.height, world, params

                nk_group_end ui.nk_ptr
            elif val == nk_window_minimized then
                if Some ev := g.ev_handler then
                    ev.handle Closed

import "window"

def Window.calculate_layout(&self, window_block: &Block, default_width: uint, default_height: uint, block: &Block) []Row =
    rows := [..]Row

    *block = self.style.calculate_block window_block, default_width, default_height

    for child := self.children do
        calculate_layout &rows, block, &self.children[i]

    rows

def Window.render(&self, world: &ecs.World, params: &ecs.RenderParams) =
    window_block := Block{
        width = params.width cast uint
        height = params.height cast uint
        margin_top_left = Vec2{0,0}
        margin_bottom_right = Vec2{0,0}
    }

    block : Block = _

    //layouting
    rows := self.calculate_layout &window_block, 100, 100, &block

    if self.begin Vec2{ block.width, block.height} then
        //rendering
        for row := rows do
            row.render row.width, row.height, world, params

    //destroy window
    self.end!

def Window.render_unselectable(&self, world: &ecs.World, params: &ecs.RenderParams) =
    unselectable_shader := shader.make world, "shaders/screenspace.vert", "shaders/unselectable.frag"

    window_block := Block{
        width = params.width
        height = params.height
        margin_top_left = Vec2{0,0}
        margin_bottom_right = Vec2{0,0}
    }

    //layouting
    block := self.style.calculate_block &window_block, 100, 100

    position := self.position.calculate!

    mouse_pos := input.get_input!.mouse_position

    corner := position + Vec2{block.width, block.height}


    if not input.get_input!.mouse_captured and mouse_pos.x >= position.x and mouse_pos.y >= position.y and mouse_pos.x <= corner.x and mouse_pos.y <= corner.y then
        input.get_input!.deactivate!

    scale_m := math.scale math.Vec3{
        block.width / params.width
        block.height / params.height
        0
    }

    origin := math.Vec3{
        (params.width/2.0) - block.width/2.0
        (params.height/2.0) - block.height/2.0
        0
    }

    translate_by := math.Vec3{
        position.x - origin.x
        position.y - origin.y
        0
    }

    //log "position = {position.x}, {position.y}"

    norm := math.Vec3{
        translate_by.x / (params.width/(2))
        translate_by.y / (params.height/(-2))
        0
    }
    trans_m := math.translate norm

    //log "origin = {origin}"
    //log "trans = {translate_by}"
    //log "norm = {norm}"

    model := trans_m * scale_m

    unselectable_shader.bind!
    unselectable_shader.set_mat4x4 (unselectable_shader.uniform_location "model"), &model //todo cache location
    primitives.render_quad params

def Label.render(&options) =
    ui := get_ui!
    nk_label ui.nk_ptr, options.text.to_c_string!, nk_text_left

def Button.render(&options) =
    ui := get_ui!
    selected := options.selected cast int

    text :=
        if (char_buffer_toString options.text.to_c_string!).length == 0 then " ".to_c_string!
        else options.text.to_c_string!

    if nk_selectable_label ui.nk_ptr, text, nk_text_left, &selected then
        guard Some ev_handler := options.ev_handler
        else return

        //ev_handler as int

        ev_handler.handle Pressed

def Image.render(&options, world: &ecs.World, params: &ecs.RenderParams) =
    ui := get_ui!

    guard Some tex := world.texture.by_id options.tex_id
    else return

    handle := nk_image_id tex.texture_id as int

    match options.ev_handler with
        Some ev ->
            selected := options.selected cast int

            if nk_selectable_image_label ui.nk_ptr, handle, "#".to_c_string!, 0, &selected then
                ev.handle Pressed

        None -> _nk_image ui.nk_ptr, handle


def Propertyf.render(&options) =
    ui := get_ui!

    field_with_id := "#{options.text}"
    *options.value = nk_propertyf ui.nk_ptr, field_with_id.to_c_string!, options.min, *options.value, options.max, options.step, options.inc_per_pixel

def Propertyu.render(&options) =
    ui := get_ui!

    field_with_id := "#{options.text}"
    *options.value = (nk_propertyi ui.nk_ptr, field_with_id.to_c_string!, options.min, *options.value, options.max, options.step, options.inc_per_pixel) cast uint

def Checkbox.render(&options) =
    ui := get_ui!

    res := nk_check_label ui.nk_ptr, options.text.to_c_string!, (not *options.value) cast int
    *options.value = (not (res cast bool))
/*
def group_begin(options: GroupOptions) bool =
    ui := get_ui!

    nk_group_begin ui.nk_ptr, options.title.to_c_string!, nk_group_options

def group_end() =
    ui := get_ui!
    nk_group_end ui.nk_ptr
*/


char_buffers := [..][..](u64, &char)
for i := 0..1003 do
    arr := [..](u64, &char)
    arr.allocator = Some context.longterm_storage
    char_buffers.append arr

def Input.render(&options) = //will leak
    ui := get_ui!

    c_string := options.value.to_c_string!
    bucket := &char_buffers[((options.value cast u64) % char_buffers.length) cast u32]

    found : Maybe[&char] = None
    for (ptr, str) := *bucket do
        if ptr == (options.value cast u64) then
            found = Some str
            break

    buffer :=
        if Some x := found then x
        else
            new_buffer := longterm_alloc::[char] options.max_length + 1
            bucket.append (options.value cast u64, new_buffer)
            new_buffer

    assert options.value.length < options.max_length, "Input, max length is smaller than size of value"
    memcpy buffer, c_string, options.value.length + 1

    nk_edit_string_zero_terminated ui.nk_ptr, nk_edit_simple, buffer, options.max_length, None
    *options.value = char_buffer_toString buffer

def Window.begin(&self, size: Vec2) bool =
    ui := get_ui!

    position := self.position.calculate!

    c_title := self.title.to_c_string!
    window_rect := nk_make_rect position.x, position.y, size.x, size.y

    nk_begin ui.nk_ptr, c_title, window_rect, nk_window_options

def Window.end(&self) =
    nk_end get_ui!.nk_ptr
