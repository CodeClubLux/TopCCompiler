import "window"
import "runner"
import "ecs"
from "math" import all
from "key" import all

//Handles all state related to input
type Input =
    first_mouse: bool

    mouse_position: Vec2
    mouse_offset: Vec2

    scroll_offset: float

    keys: KeyActionMap
    last_frame_keys: KeyActionMap //@todo might want to remove this dynamic array, replace with static

    window: &window.Window

    mouse_captured: bool

    mouse_button_down: [3]bool
    last_mouse_button_down: [3]bool

    active: bool

def window_cursor_pos_callback(mouse_position: Vec2) =
    self := get_input!

    if self.first_mouse then
        self.mouse_position = mouse_position
        self.first_mouse = false

    xpos := mouse_position.x
    ypos := mouse_position.y

    xoffset := xpos - self.mouse_position.x
    yoffset := self.mouse_position.y - ypos //reversed since y-coordinates go from bottom to top

    self.mouse_offset = Vec2{ xoffset, yoffset }

    self.mouse_position = mouse_position


def to_device_coord(position: Vec2) Vec2 = //Takes mouse postion and transforms into device coordinates
    w := window.get_window!

    Vec2{
        position.x / w.width * 2 - 1
        -(position.y / w.height * 2 - 1)
    }

def capture_mouse(captured: bool) =
    get_input!.mouse_captured = captured

    window
        .get_window!
        .capture_mouse captured

def window_key_callback(_key: Key, action: KeyAction) =
    self := get_input!
    self.keys.insert _key, action
    //todo delete key from last frame map if the key was released

def is_active() bool =
    get_input!.active

def key_down(_key: Key) bool =
    if not is_active! then return false

    window
        .get_window!
        .key_down _key

def mouse_button_down(button: MouseButton) bool =
    window
        .get_window!
        .mouse_button_down button

def mouse_button_pressed(button: MouseButton) bool =
    inp := get_input!
    if not inp.active then return false

    (not inp.last_mouse_button_down[button.tag]) and mouse_button_down button

def key_pressed(_key: Key) bool =
    self := get_input!
    if not self.active then return false

    if not self.last_frame_keys.contains _key then
        return key_down _key

    self.last_frame_keys[_key] == Released and key_down _key

/*
def mouse_button_callback(button: MouseButton, action: KeyAction) =
    self := get_input!
    log "clicked"
    self.mouse_button_down[button.tag] = action
*/

def clear() =
    self := get_input!

    for _key := self.keys.keys do
        value := self.keys.actions[i]
        self.last_frame_keys.insert _key, value

    self.keys.clear!

    self.last_mouse_button_down = self.mouse_button_down

def get_vertical_axis() float =
    if not is_active! then return 0

    if key_down key.from_char `W` then 1
    elif key_down key.from_char `S` then -1
    else 0

def get_horizontal_axis() float =
    if not is_active! then return 0

    if key_down key.from_char `D` then 1
    elif key_down key.from_char `A` then -1
    else 0

def update_inputs() =
    s := get_input!
    s.mouse_offset = Vec2{0,0}

    window
        .get_window!
        .update_inputs!

    s.mouse_button_down = [
        mouse_button_down Middle
        mouse_button_down Right
        mouse_button_down Left
    ]

def Input.activate(&self) =
    self.active = true

def Input.deactivate(&self) =
    self.active = false

def make_Input() Input =
    w := window.get_window!

    w.set_cursor_pos_callback window_cursor_pos_callback
    w.set_key_callback window_key_callback
    //w.set_mouse_button_callback mouse_button_callback

    Input{
        first_mouse = true

        mouse_position = Vec2{0,0}
        mouse_offset = Vec2{0,0}

        scroll_offset = 0.0

        keys = make_KeyActionMap!
        last_frame_keys = make_KeyActionMap!

        window = w

        mouse_captured = false

        mouse_button_down = [3: false]
        last_mouse_button_down = [3: false]

        active = true
    }

#addToContext input := box make_Input!

def get_input() &Input =
    context.input



