import "ecs"
import "camera"
import "input"
from "time" import (get_delta_time)
import "camera"
import "key"
import "math"
from "layermask" import Layermask
from "transform" import all
import "editor"

type FPSController =
    mouse_sensitivity: float
    movement_speed: float
    yaw: float
    pitch: float

    past_movement_speed: [3]math.Vec2
    past_movement_speed_length: uint

def FPSController.get_speed(using &self) float =
    if input.key_down key.lshift then movement_speed * 2 * get_delta_time!
    else movement_speed * get_delta_time!

def FPSController.update(using &self, entity: &Transform) =
    //movement
    facing_rotation := -entity.rotation

    forward := (facing_rotation.mul_vec3 math.Vec3{0,0,-1}).norm!
    right := (facing_rotation.mul_vec3 math.Vec3{1,0,0}).norm!

    vertical_axis := input.get_vertical_axis!
    horizontal_axis := input.get_horizontal_axis!

    entity.position += forward.scale vertical_axis * self.get_speed!
    entity.position += right.scale horizontal_axis * self.get_speed!

    //mouse look
    latest_mouse_offset := context.input.mouse_offset.scale mouse_sensitivity

    if past_movement_speed_length < past_movement_speed.length then
        past_movement_speed[past_movement_speed_length] = latest_mouse_offset
        past_movement_speed_length += 1
    else
        copy_past_movement_speed := past_movement_speed

        for i := 0..past_movement_speed.length - 1 do
            past_movement_speed[i] = copy_past_movement_speed[i+1]

        past_movement_speed[past_movement_speed.length - 1] = latest_mouse_offset

    //average mouse speed
    mouse_offset := math.Vec2{ 0, 0 }
    for i := 0..past_movement_speed_length do
        mouse_offset += past_movement_speed[i]

    mouse_offset =
        if editor.in_editor! then
            if input.mouse_button_down key.Right then
                input.capture_mouse true
                mouse_offset.scale (1.0/past_movement_speed_length)
            else
                input.capture_mouse false
                math.Vec2{0,0}
        else
            input.capture_mouse true
            mouse_offset.scale (1.0/past_movement_speed_length)

    yaw = mouse_offset.x + yaw
    pitch = (-mouse_offset.y) + pitch

    if pitch > 89 then
        pitch = 89
    if pitch < (-89) then
        pitch = -89
    if yaw > 360 then
        yaw -= 360
    if yaw < (-360) then
        yaw += 360

    q_pitch := math.make_quat (math.radians pitch), math.Vec3{ 1, 0, 0 }
    q_yaw := math.make_quat (math.radians yaw), math.Vec3{ 0, 1, 0}

    orientation := q_pitch * q_yaw

    entity.rotation = orientation.norm!

fpsControllers := ecs.make_Store 5, FPSController{
    mouse_sensitivity = 0.005
    movement_speed = 6
    yaw = 0
    pitch = 0
    past_movement_speed = [3: math.Vec2{0,0}]
    past_movement_speed_length = 0
}

type FPSControllerSystem =
def FPSControllerSystem.render(&system, m: Layermask) =
def FPSControllerSystem.update(&system, m: Layermask) =
    for (controller, trans) := ecs.filter2 fpsControllers, transforms, m do
        controller.update trans

fpsController_system := FPSControllerSystem{}
ecs.register_system &fpsController_system

def make_FPSController(id: ecs.ID) &FPSController =
    fpsControllers.make id