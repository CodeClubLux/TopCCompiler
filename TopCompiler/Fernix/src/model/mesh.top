import "buffer"
from "math" import all
import "ecs"
import "opengl"
import "draw"

type Vertex =
    position: Vec3
    normal: Vec3
    tex_coord: Vec2
    tangent: Vec3
    bitangent: Vec3

type Mesh =
    buffer: &buffer.VertexBuffer
    vertices: []Vertex
    indices: []uint
    material_id: uint

def make_Mesh(vertices: []Vertex, indices: []uint, material_id: uint) Mesh =
    attributes := [
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, position }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, normal }
        buffer.VertexAttrib{ 2, buffer.Float, offsetof Vertex, tex_coord }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, tangent }
        buffer.VertexAttrib{ 3, buffer.Float, offsetof Vertex, bitangent}
    ]

    Mesh{
        buffer = box buffer.make_vertex_buffer vertices, indices, &attributes
        vertices = vertices
        indices = indices
        material_id = material_id
    }

def Mesh.render(&self, entity: &ecs.Entity, materials: []Material) =
    material := &materials[self.material_id]
    cmd := draw.make_DrawCommand entity, self.buffer, material
    cmd.submit!

    //material.bind entity
    //self.buffer.bind!

    //opengl.drawElements opengl.triangles, self.indices.length, opengl.unsigned_int, 0