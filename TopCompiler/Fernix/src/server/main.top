import "task"
import "sync"
from "transform" import all
import "ecs"
import "input"

type Ball =
    speed: float

balls := ecs.make_component Ball{ speed = 10 }

type BallSystem =

def BallSystem.render(&self, mask: Layermask) =

type BallUpdateJob =
    trans: &Transform
    ball: &Ball
    vertical: float
    horizontal: float

def BallUpdateJob.run(using &self) =
    trans.position.z = vertical * ball.speed * time.get_delta_time!
    trans.position.x = horizontal * ball.speed * time.get_delta_time!

def BallSystem.update(&self, mask: Layermask) =
    defer context.allocator.reset_to context.allocator.get_occupied!

    vertical := input.get_vertical_axis!
    horizontal := input.get_horizontal_axis!

    wg := sync.make_WaitGroup!

    for trans, ball := ecs.filter2 balls, transforms do
        wg.wait_on task.HighPriority, box Job{
            trans = trans
            ball = ball
            vertical = vertical
            horizontal = horizontal
        }

    wg.wait!

ecs.register_system BallSystem{}