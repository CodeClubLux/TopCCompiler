import "runner"
import "texture"
import "opengl"
import "primitives"
import "shader"
import "math"
import "buffer"
import "camera"
import "runner"
import "ecs"
import "draw"
from "materialSystem" import all

skybox_shader := shader.make "shaders/skybox.vert", "shaders/skybox.frag"

type Skybox =
    entity: &ecs.Entity

    env_cubemap: texture.Cubemap
    irradiance_cubemap: texture.Cubemap
    prefilter_cubemap: texture.Cubemap
    brdf_LUT: &texture.Texture

def Skybox.get_entity(&self) &ecs.Entity =
    self.entity

def Skybox.update(&self) =

skybox_state := draw.default_state{
    order = draw.draw_skybox
}

def Skybox.render(&self) =
    mat := box Material{
        name = "skybox_shader"
        shader = skybox_shader
        params = box [
            Param_Cubemap "environmentMap", self.env_cubemap
        ]
        state = &skybox_state
    }

    cmd := draw.make_DrawCommand None, primitives.cube.meshes[0].buffer, mat
    cmd.submit!

    /*
    skybox_shader.bind!

    self.env_cubemap.bind_to 0

    cam := camera.get_camera!

    skybox_shader.set_mat4x4 "projection", &cam.projection_matrix
    skybox_shader.set_mat4x4 "view", &cam.view_matrix

    primitives.render_cube!
    */

brdf_LUT_texture2 := texture.load "ibl_brdf_lut.png"

def Skybox.set_ibl_params_for(&self, s: shader.Shader) =
    self.irradiance_cubemap.bind_to 0
    s.set_int "irradianceMap", 0

    self.prefilter_cubemap.bind_to 1
    s.set_int "prefilterMap", 1

    self.brdf_LUT.bind_to 2
    s.set_int "brdfLUT", 2



//Skybox system
skybox_system := ecs.make_Store make_default_Skybox, 1

def make_default_Skybox(id: ecs.ID) &Skybox =
    make_Skybox id, "Tropical_Beach_3k.hdr"

def get_skybox() &Skybox =
    skybox_system
        .get_active!
        .unwrap!

def make_Skybox(id: ecs.ID, name: string) &Skybox =
    opengl.enable opengl.texture_cube_map_seamless

    equirectangular_to_cubemap_shader := shader.make "shaders/eToCubemap.vert", "shaders/eToCubemap.frag"

    capture_FBO : uint = _
    capture_RBO : uint = _

    opengl.genFramebuffers 1, &capture_FBO
    opengl.genRenderbuffers 1, &capture_RBO

    opengl.bindFramebuffer opengl.framebuffer, capture_FBO
    opengl.bindRenderbuffer opengl.renderbuffer, capture_RBO
    opengl.renderbufferStorage opengl.renderbuffer, opengl.depth_component24, 2048, 2048
    opengl.framebufferRenderbuffer opengl.framebuffer, opengl.depth_attachment, opengl.renderbuffer, capture_RBO

    hdr_texture := texture.load name

    env_cubemap: uint = _
    opengl.genTextures 1, &env_cubemap
    opengl.bindTexture opengl.texture_cube_map, env_cubemap

    for i := 0..6 do
        opengl.texImage2D
            (opengl.texture_cube_map_positive_x + i)
            0
            opengl.rgb16f
            2048
            2048
            0
            opengl.rgb
            opengl.type_float
            None

    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_s, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_t, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_r, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_min_filter, opengl.linear_mipmap_linear
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_mag_filter, opengl.linear

    capture_projection := math.perspective
        math.radians 90
        1.0
        0.1
        10

    capture_views := [
        math.look_at math.Vec3{0,0,0}, math.Vec3{1,0,0}, math.Vec3{0,-1,0}
        math.look_at math.Vec3{0,0,0}, math.Vec3{-1,0,0}, math.Vec3{0,-1,0}
        math.look_at math.Vec3{0,0,0}, math.Vec3{0,1,0}, math.Vec3{0,0,1}
        math.look_at math.Vec3{0,0,0}, math.Vec3{0,-1,0}, math.Vec3{0,0,-1}
        math.look_at math.Vec3{0,0,0}, math.Vec3{0,0,1}, math.Vec3{0,-1,0}
        math.look_at math.Vec3{0,0,0}, math.Vec3{0,0,-1}, math.Vec3{0,-1,0}
    ]

    equirectangular_to_cubemap_shader.bind!
    equirectangular_to_cubemap_shader.set_int "equirectangularMap", 0
    equirectangular_to_cubemap_shader.set_mat4x4 "projection", &capture_projection

    opengl.activeTexture opengl.texture0
    hdr_texture.bind_to 0

    opengl.viewport 0, 0, 2048, 2048
    opengl.bindFramebuffer opengl.framebuffer, capture_FBO


    for i := 0..6 do
        equirectangular_to_cubemap_shader.set_mat4x4 "view", &capture_views[i]
        opengl.framebufferTexture2D
            opengl.framebuffer
            opengl.color_attachment0
            opengl.texture_cube_map_positive_x + i
            env_cubemap
            0

        opengl.clear opengl.color_buffer_and_depth_buffer_bit
        primitives.render_cube!

    opengl.bindFramebuffer opengl.framebuffer, 0

    opengl.bindTexture opengl.texture_cube_map, env_cubemap
    opengl.generateMipmap opengl.texture_cube_map

    irradiance_shader := shader.make "shaders/irradiance.vert", "shaders/irradiance.frag"

    irradiance_map : uint = _

    opengl.genTextures 1, &irradiance_map
    opengl.bindTexture opengl.texture_cube_map, irradiance_map

    for i := 0..6 do
        opengl.texImage2D
            opengl.texture_cube_map_positive_x + i
            0
            opengl.rgb16f
            32
            32
            0
            opengl.rgb
            opengl.type_float
            None

    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_s, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_t, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_r, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_min_filter, opengl.linear
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_mag_filter, opengl.linear

    opengl.bindFramebuffer opengl.framebuffer, capture_FBO
    opengl.bindRenderbuffer opengl.renderbuffer, capture_RBO
    opengl.renderbufferStorage opengl.renderbuffer, opengl.depth_component24, 32, 32

    irradiance_shader.bind!
    irradiance_shader.set_int "environmentMap", 0
    irradiance_shader.set_mat4x4 "projection", &capture_projection
    opengl.activeTexture opengl.texture0
    opengl.bindTexture opengl.texture_cube_map, env_cubemap

    opengl.viewport 0, 0, 32, 32
    opengl.bindFramebuffer opengl.framebuffer, capture_FBO

    for i := 0..6 do
        irradiance_shader.set_mat4x4 "view", &capture_views[i]
        opengl.framebufferTexture2D
            opengl.framebuffer
            opengl.color_attachment0
            opengl.texture_cube_map_positive_x + i
            irradiance_map
            0

        opengl.clear opengl.color_buffer_and_depth_buffer_bit
        primitives.render_cube!

    opengl.bindFramebuffer opengl.framebuffer, 0

    prefilter_map: uint = _
    opengl.genTextures 1, &prefilter_map
    opengl.bindTexture opengl.texture_cube_map, prefilter_map

    for i := 0..6 do
        opengl.texImage2D
            opengl.texture_cube_map_positive_x + i
            0
            opengl.rgb16f
            256, 256, 0,
            opengl.rgb, opengl.type_float, None

    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_s, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_t, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_wrap_r, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_min_filter, opengl.linear_mipmap_linear
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_mag_filter, opengl.linear

    opengl.generateMipmap opengl.texture_cube_map

    prefilter_shader := shader.make "shaders/prefilter.vert", "shaders/prefilter.frag"

    prefilter_shader.bind!
    prefilter_shader.set_int "environmentMap", 0
    prefilter_shader.set_mat4x4 "projection", &capture_projection

    opengl.activeTexture opengl.texture0
    opengl.bindTexture opengl.texture_cube_map, env_cubemap
    opengl.texParameteri opengl.texture_cube_map, opengl.texture_min_filter, opengl.linear_mipmap_linear

    opengl.bindFramebuffer opengl.framebuffer, capture_FBO

    maxMipLevels := 6

    for mip := 0..maxMipLevels do
        mip_width := (256 * (0.5 ^ mip)) cast uint
        mip_height := (256 * (0.5 ^ mip)) cast uint

        opengl.bindRenderbuffer opengl.renderbuffer, capture_RBO
        opengl.renderbufferStorage opengl.renderbuffer, opengl.depth_component24, mip_width, mip_height
        opengl.viewport 0, 0, mip_width, mip_height

        roughness := (mip as float) / (maxMipLevels - 1 as float)
        prefilter_shader.set_float "roughness", roughness

        for i := 0..6 do
            prefilter_shader.set_mat4x4 "view", &capture_views[i]
            opengl.framebufferTexture2D
                opengl.framebuffer
                opengl.color_attachment0
                opengl.texture_cube_map_positive_x + i
                prefilter_map
                mip

            opengl.clear opengl.color_buffer_and_depth_buffer_bit
            primitives.render_cube!


    opengl.bindFramebuffer opengl.framebuffer, 0

    brdf_shader := shader.make "shaders/brdf_convultion.vert", "shaders/brdf_convultion.frag"

    brdf_LUT_texture : uint = _
    opengl.genTextures 1, &brdf_LUT_texture

    opengl.bindTexture opengl.texture_2D, brdf_LUT_texture
    opengl.texImage2D opengl.texture_2D, 0, opengl.rgb16f, 512, 512, 0, opengl.rg, opengl.type_float, None
    opengl.texParameteri opengl.texture_2D, opengl.texture_wrap_s, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_2D, opengl.texture_wrap_t, opengl.clamp_to_edge
    opengl.texParameteri opengl.texture_2D, opengl.texture_min_filter, opengl.linear
    opengl.texParameteri opengl.texture_2D, opengl.texture_mag_filter, opengl.linear

    opengl.bindFramebuffer opengl.framebuffer, capture_FBO
    opengl.bindRenderbuffer opengl.renderbuffer, capture_RBO
    opengl.renderbufferStorage opengl.renderbuffer, opengl.depth_component24, 512, 512
    opengl.framebufferTexture2D opengl.framebuffer, opengl.color_attachment0, opengl.texture_2D, brdf_LUT_texture, 0

    opengl.viewport 0, 0, 512, 512
    brdf_shader.bind!
    opengl.clear opengl.color_buffer_and_depth_buffer_bit
    primitives.render_quad!

    opengl.bindFramebuffer opengl.framebuffer, 0
    opengl.bindTexture opengl.texture_2D, 0
    opengl.bindTexture opengl.texture_cube_map, 0

    entity := match ecs.entity_system.component_by_id id with
        Some e -> e
        None -> ecs.make_Entity id

    brdf_LUT_as_texture := texture.make_Texture ecs.make_ID!
    brdf_LUT_as_texture.filename = "brdf_LUT"
    brdf_LUT_as_texture.texture_id = brdf_LUT_texture

    skybox_system.add_component Skybox{
        entity = entity
        env_cubemap = texture.Cubemap{ env_cubemap }
        irradiance_cubemap = texture.Cubemap{ irradiance_map }
        prefilter_cubemap = texture.Cubemap{ prefilter_map }
        brdf_LUT = brdf_LUT_as_texture
    }
