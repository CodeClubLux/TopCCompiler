import "ecs"
import "camera"
import "playerInput"
from "time" import (get_delta_time)
import "camera"
import "key"
from "math" import all
from "layermask" import Layermask
from "transform" import all
import "physics"

#if {"headless": false}
import "physics"
import "model"
from "materialSystem" import all
import "draw"
import "shader"
import "ui"
import "window"
#endif

type FPSController =
    movement_speed: float
    roll_speed: float
    roll_duration: float
    roll_cooldown: float
    roll_cooldown_time: float
    roll_blend: float

def FPSController.update(using &self, entity: &LocalTransform) =
    //movement
    guard Some rb := physics.rigid_bodies.by_id entity.owner //body_id
    else panic "Could not find rigid body"

    player_input := playerInput.get_player_input!

    (pitch, yaw) := (player_input.pitch, player_input.yaw)

    facing_rotation := math.quat_from_euler math.Vec3{0, (radians yaw), 0}
    forward := (facing_rotation.mul_vec3 math.Vec3{0,0,-1}).norm!
    right := (facing_rotation.mul_vec3 math.Vec3{1,0,0}).norm!

    roll_cooldown -= time.get_delta_time!

    if playerInput.get_player_input!.shift and roll_cooldown <= 0 then
        roll_cooldown = roll_cooldown_time
        roll_blend = 1

    vel := (roll_speed * roll_blend) + (movement_speed * (1.0 - roll_blend))

    roll_blend -= time.get_delta_time! / roll_duration
    roll_blend = max 0.0, roll_blend

    vec := forward.scale player_input.vertical_axis * vel
    vec += right.scale player_input.horizontal_axis * vel

    rb.velocity.x = vec.x
    rb.velocity.z = vec.z

    if player_input.space then
        rb.override_velocity_y = true
        rb.velocity.y = 5
    else
        rb.override_velocity_y = false

    orientation := math.quat_from_euler math.Vec3{(radians pitch), (radians yaw), 0}
    entity.rotation = orientation

fpsControllers := ecs.make_Store 5, FPSController{
    movement_speed = 6
    roll_speed = 12
    roll_cooldown = 0
    roll_cooldown_time = 5
    roll_duration = 1
    roll_blend = 0
}

type FPSControllerSystem =
def FPSControllerSystem.render(&system, m: Layermask) =
def FPSControllerSystem.update(&system, m: Layermask) =
    for (controller, trans) := ecs.filter2 fpsControllers, local_transforms, m do
        controller.update trans

fpsController_system := FPSControllerSystem{}
ecs.register_system &fpsController_system

import "lister"

def make_FPSController(id: ecs.ID) &FPSController =
    n := lister.named.make id
    n.name = "Character_controller_look"

    body_id := ecs.make_ID!

    entity := ecs.make_Entity body_id
    entity.layermask = (ecs.entities.by_id id).unwrap!.layermask

    n = lister.named.make body_id
    n.name = "Character_controller_body"

    rb := physics.rigid_bodies.make body_id
    rb.shape = physics.Box math.Vec3{0.5, 1, 0.5}
    rb.mass = 1
    rb.override_rotation = true
    rb.override_velocity_x = true
    rb.override_velocity_y = true
    rb.override_velocity_z = true
    rb.continous = true

    curr_trans := (transforms.by_id id).expect "Could not find transform"

    trans := make_Transform body_id
    *trans = (*curr_trans)

    fp_controller := (fpsControllers.make id)
    //fp_controller.body_id = body_id

    child_transform := make_LocalTransform id
    child_transform.owner = body_id
    child_transform.position.y = 1.0

    fp_controller