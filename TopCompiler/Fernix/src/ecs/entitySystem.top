last_assigned_id := 0
skipped_ids := [..]ID
skipped_ids.allocator = Some context.longterm_storage

free_ids := [..]ID
free_ids.allocator = Some context.longterm_storage

def make_ID() ID =
    if free_ids.length > 0 then
        return free_ids.pop!

    unique := false
    while not unique do
        last_assigned_id += 1

        unique = true
        for c := skipped_ids do
            if last_assigned_id - 1 == c then
                unique = false

    last_assigned_id - 1

def skip_ID(id: ID) =
    skipped_ids.append id

def make_Entity(id: ID) &Entity =
    entities.make id

def free_entity(id: ID) =
    i := component_types.length - 1
    while true do
        system := &component_types[i]
        system.free_by_id id

        if i == 0 then break
        i -= 1
    free_ids.append id

def clone(id: ID) ID =
    new := make_ID!

    for comp_store := component_types do
        guard Some comp := comp_store.get_by_id id
        else continue

        new_comp := comp_store.make new
        memcpy new_comp, comp.get_pointer_to_data!, comp_store.get_component_type!.get_size! cast uint

    new