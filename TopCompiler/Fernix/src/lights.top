import "ecs"
import "math"
from "layermask" import all
import "math"
#if {"headless": false}
import "draw"
import "model"
import "shader"
from "materialSystem" import all
#endif
from "math" import Vec3

type DirLight =
    direction: math.Vec3
    color: math.Vec3

def make_DirLightStore() ecs.Store[DirLight] =
    ecs.make_Store 1, DirLight{
        math.Vec3{ 0, -1, -1 }.norm!
        math.Vec3{ 1, 1, 1 }
    }

def make_default_DirLight(world: &ecs.World) &DirLight =
    (id, e) := world.make_Entity!
    world.dir_light.make id

def get_dir_light(world: &ecs.World) &DirLight =
    (world.dir_light.get_active world).unwrap!

type DirLightSystem =
    light_gizmo: &model.Model
    light_shader: &shader.Shader
    light_materials: [1]Material

def make_DirLightSystem(world: &ecs.World) DirLightSystem =
    light_gizmo := model.load_model world, "editor/dirLight.fbx"
    light_shader := shader.make world, "shaders/pbr.vert", "shaders/diffuse.frag"

    light_materials := [
        Material{
            name = "DefaultMaterial"
            shader = ecs.id_of light_shader
            params = box [
                Param_Vec3 (light_shader.location "material.diffuse"), Vec3{0,0.8,0.8}
            ]
            state = &draw.default_state
        }
    ]

    DirLightSystem{light_gizmo, light_shader, light_materials}

def DirLightSystem.render(using &self, world: &ecs.World, params: &ecs.RenderParams) =
    m := params.layermask
    params.dir_light = get_dir_light world

    for (light, trans) := ecs.filter2 world, &world.dir_light, &world.transform, m do
        light.direction = trans.rotation.mul_vec3 math.Vec3{0,-1,0}

    #if {"headless": false}
    if (m.layer_in_mask editor_layer) or (m.layer_in_mask pickable_layer) then
        m = layermask.make_Layermask!
            .enable game_layer

        for (cam, trans) := ecs.filter2 world, &world.dir_light, &world.transform, m do
            light_gizmo.render_model_for (ecs.id_of cam), trans, &light_materials
    #endif

def DirLightSystem.update(&self, world: &ecs.World, params: &ecs.UpdateParams) =